import Utils
from Utils import read_snes_rom
from worlds.AutoWorld import World
from worlds.Files import APDeltaPatch
#from .Locations import lookup_id_to_name, all_locations

USHASH = "635d5d7dd2aad4768412fbae4a32fd6e"
ROM_PLAYER_LIMIT = 65535

ROM_FREE_SPACE = 0xF8000
DEATHLINK_ADR = ROM_FREE_SPACE + 2
DEBUG_ADR = ROM_FREE_SPACE + 4
DCRYSTAL_ADR = ROM_FREE_SPACE + 6
POPGOAL_ADR = ROM_FREE_SPACE + 8
TANZRA_ADR = ROM_FREE_SPACE + 10
POPGOAL_ADR_ENA = ROM_FREE_SPACE + 11
CRYGOAL_ADR_ENA = ROM_FREE_SPACE + 12

MUSIC_TABLE = 0x36D9E

import hashlib
import os
import math
import random
#import struct

item_rom_data = {
    #Address is meaningless, carried over from the DKC3 apworld, 
    # don't want to break what is working, but could be converted into a normal array
    0x1C1001: [0x5D5], # Magical Fire
    0x1C1002: [0x5C9], # Magical Stardust
    0x1C1003: [0x5CB], # Magical Aura
    0x1C1004: [0x5CF], # Magical Light

    0x1C1005: [0x5CF], # Source of Life
    0x1C1006: [0x5CD], # Source of Magic

    0x1C1007: [0x5D1], # Bread
    0x1C1008: [0x5D1], # Wheat
    0x1C1009: [0x5D1], # Wheat
    0x1C100A: [0x5D1], # Bridge
    0x1C100B: [0x5D1], # Music
    0x1C100C: [0x5D1], # Ancient Tablet
    0x1C100D: [0x5D1],# Ancient Tablet
    0x1C100E: [0x5D1], # Magic Skull
    0x1C100F: [0x5D1], # Fleece
    #0x1C1010: [0x5D1], # Bomb
    0x1C1011: [0x5D1],# Fertility
    0x1C1012: [0x5D1],# Bomb
    0x1C1013: [0x5D1], # Compass
    0x1C1014: [0x5D1], # Strength of Angel

    0x1C1015: [0x5D1], # Level Up
    0x1C1016: [0x5D1], # Apple
    0x1C1017: [0x5D1], # Flame Sword

    0x1C1018: [0x5D1], # Fillmore Advancement
    0x1C1019: [0x5D1], # Bloodpool Advancement
    0x1C101A: [0x5D1], # Kasandora Advancement
    0x1C101B: [0x5D1], # Aitos Advancement
    0x1C101C: [0x5D1], # Marahna Advancement
    0x1C101D: [0x5D1], # Northwall Advancement

    0x1C101E: [0x5D1], # Progressive Arrow Upgrade 

    0x1C101F: [0x5D1], # Deathheim Crystal

    0x1C1020: [0x5D1], # Lightning
    0x1C1021: [0x5D1], # Rain
    0x1C1022: [0x5D1], # Sun
    0x1C1023: [0x5D1], # Wind
    0x1C1024: [0x5D1],  # Earthquake

    0x1C1025: [0x5D1], # 1up
    0x1C1026: [0x5D1], # 1000 Points
    0x1C1027: [0x5D1], # Magic
    0x1C1028: [0x5D1], # Smite
    0x1C1029: [0x5D1], # Population Boom

    0x1C102A: [0x5D1], # Savior
    0x1C102B: [0x5D1], # Prosperity

    0x1C1030: [0x5D1], #Skull Trap
    0x1C1031: [0x5D1], #Redirect Trap

}

act_clear_rom_data = {
    0x1C1000: [0x16B18, 0], #Fillmore Act1 Clear
    0x1C1001: [0x16B18, 1], #Fillmore Act2 Clear
    0x1C1002: [0x16B1A, 0], #Bloodpool Act1 Clear
    0x1C1003: [0x16B1A, 1], #Bloodpool Act2 Clear
    0x1C1004: [0x16B1C, 0], #Kasandora Act1 Clear
    0x1C1005: [0x16B1C, 1], #Kasandora Act2 Clear
    0x1C1006: [0x16B1E, 0], #Aitos Act1 Clear
    0x1C1007: [0x16B1E, 1], #Aitos Act2 Clear
    0x1C1008: [0x16B20, 0], #Marahna Act1 Clear
    0x1C1009: [0x16B20, 1], #Marahna Act2 Clear
    0x1C100A: [0x16B22, 0], #Northwall Act1 Clear
    0x1C100B: [0x16B22, 1], #Northwall Act2 Clear
}

event_flag_rom_data  = {
    # 1C-1E, 74-7F, C2-FF
    0x1C101C: [0x1919A, 0], # Cure Plague
    #0x1C101D: [0x191A5, 0], # Use Music
    0x1C101E: [0x191C1, 0], # Use Fleece
}

region_pop_rom_data = {
    0x1C1025: [0x21C, 6],   #Fillmore Population Check 1
    0x1C1026: [0x21C, 7],   #Fillmore Population Check 2
    0x1C1027: [0x21D, 0],   #Fillmore Population Check 3
    0x1C1028: [0x21D, 1],   #Fillmore Population Check 4

    0x1C1029: [0x21E, 6],   #Bloodpool Population Check 1
    0x1C102A: [0x21E, 7],   #Bloodpool Population Check 2
    0x1C102B: [0x21F, 0],   #Bloodpool Population Check 3
    0x1C102C: [0x21F, 1],   #Bloodpool Population Check 4

    0x1C102D: [0x220, 6],   #Kasandora Population Check 1
    0x1C102E: [0x220, 7],   #Kasandora Population Check 2
    0x1C102F: [0x221, 0],   #Kasandora Population Check 3
    0x1C1030: [0x221, 1],   #Kasandora Population Check 4

    0x1C1031: [0x222, 6],   #Aitos Population Check 1
    0x1C1032: [0x222, 7],   #Aitos Population Check 2
    0x1C1033: [0x223, 0],   #Aitos Population Check 3
    0x1C1034: [0x223, 1],   #Aitos Population Check 4

    0x1C1035: [0x224, 6],   #Marahna Population Check 1
    0x1C1036: [0x224, 7],   #Marahna Population Check 2
    0x1C1037: [0x225, 0],   #Marahna Population Check 3
    #0x1C1038: [0x225, 1],   #Marahna Population Check 4

    0x1C1039: [0x226, 6],   #Marahna Population Check 1
    0x1C103A: [0x226, 7],   #Marahna Population Check 2
    0x1C103B: [0x227, 0],   #Marahna Population Check 3
    0x1C103C: [0x227, 1],   #Marahna Population Check 4
}

location_rom_data = {
    0x1C100C: [0x1A2F, 0], # Deathheim Goal
    0x1C100D: [0x1A2F, 1], # Population Goal

    0x1C1010: [0x1A28, 1], #Fillmore Advancement 1
    0x1C1011: [0x1A29, 1], #Fillmore Advancement 2
    0x1C1012: [0x1A28, 2], #Bloodpool Advancement 1
    0x1C1013: [0x1A29, 2], #Bloodpool Advancement 2
    0x1C1014: [0x1A28, 3], #Kasandora Advancement 1
    0x1C1015: [0x1A29, 3], #Kasandora Advancement 2
    0x1C1016: [0x1A28, 4], #Aitos Advancement 1
    0x1C1017: [0x1A29, 4], #Aitos Advancement 2
    0x1C1018: [0x1A28, 5], #Marahna Advancement 1
    0x1C1019: [0x1A29, 5], #Marahna Advancement 2
    0x1C101A: [0x1A28, 6], #Northwall Advancement 1
    0x1C101B: [0x1A29, 6], #Northwall Advancement 2

    0x1C101F: [0x1A27, 0], # Fillmore Max Population
    0x1C1020: [0x1A27, 1], # Bloodpool Max Population
    0x1C1021: [0x1A27, 2], # Kasandora Max Population
    0x1C1022: [0x1A27, 3], # Aitos Max Population
    0x1C1023: [0x1A27, 4], # Marahna Max Population
    0x1C1024: [0x1A27, 5], # Northwall Max Population

    0x1C103D: [0x1A10, 0], # Level 2--
    0x1C103E: [0x1A10, 1], #
    0x1C103F: [0x1A10, 2], #
    0x1C1040: [0x1A10, 3], #
    0x1C1041: [0x1A10, 4], #
    0x1C1042: [0x1A10, 5], #
    0x1C1043: [0x1A10, 6], #
    0x1C1044: [0x1A10, 7], #

    0x1C1045: [0x1A11, 0], #
    0x1C1046: [0x1A11, 1], #
    0x1C1047: [0x1A11, 2], #
    0x1C1048: [0x1A11, 3], #
    0x1C1049: [0x1A11, 4], #
    0x1C104A: [0x1A11, 5], #
    0x1C104B: [0x1A11, 6], #
    0x1C104C: [0x1A11, 7], # Level 17

    0x1C1050: [0x1A12, 0], #Magical Fire
    0x1C1051: [0x1A12, 1], #Magical Stardust
    0x1C1052: [0x1A12, 2], #Magical Aura
    0x1C1053: [0x1A12, 3], #Magical Light

    0x1C1054: [0x1A14, 0], #Loaf of Bread
    0x1C1055: [0x1A14, 1], #Wheat
    0x1C1056: [0x1A14, 2], #Herb
    0x1C1057: [0x1A14, 3], #Bridge
    0x1C1058: [0x1A14, 4], #Music
    0x1C1059: [0x1A14, 5], #Ancient Tablet
    0x1C105A: [0x1A14, 6], #Magic Skull
    0x1C105B: [0x1A14, 7], #Fleece
    0x1C105C: [0x1A19, 1], #Compass

    0x1C1060: [0x1A18, 0], #FM Bomb
    0x1C1061: [0x1A1A, 0], #FM SoA
    0x1C1062: [0x1A1C, 0], #FM SoM
    0x1C1063: [0x1A1B, 0], #FM SoL

    0x1C1064: [0x1A18, 1], #BP Bomb
    0x1C1065: [0x1A1B, 1], #BP SoL
    0x1C1066: [0x1A1C, 1], #BP SoM

    0x1C1067: [0x1A1A, 2], #KD SoA
    0x1C1068: [0x1A18, 2], #KD Bomb
    0x1C1069: [0x1A1C, 2], #KD SoM
    0x1C106A: [0x1A1B, 2], #KD SoL

    0x1C106B: [0x1A18, 3], #AT Bomb
    0x1C106C: [0x1A1A, 3], #AT SoA
    0x1C106D: [0x1A1C, 3], #AT SoM

    0x1C106E: [0x1A1A, 4], #MH SoA
    0x1C106F: [0x1A18, 4], #MH Bomb

    0x1C1070: [0x1A1A, 5], #NW SoA
    0x1C1071: [0x1A18, 5], #NW Bomb
    0x1C1072: [0x1A1C, 5], #NW SoM
    0x1C1073: [0x1A1B, 5], #NW SoL

    0x1C1074: [0x1A1C, 4], #MH SoM

}

orb_location_data = {
    # 0: Region ID
    # 1: Map ID
    # 2-3: Xpos
    # 4-5: Ypos
    #Fillmore Forest
    0x1C1080: [0x1, 0x1, 0xc0, 0x2, 0x30, 0x2, ], #FMF 500 Points
    0x1C1081: [0x1, 0x1, 0x90, 0x5, 0xa0, 0x1, ], #FMF 1UP 1
    0x1C1082: [0x1, 0x1, 0x60, 0x9, 0x10, 0x1, ], #FMF Apple 1
    0x1C1083: [0x1, 0x1, 0x90, 0xa, 0x30, 0x2, ], #FMF 1UP 2
    0x1C1084: [0x1, 0x1, 0xe0, 0xc, 0x90, 0x1, ], #FMF Apple 2

    #Fillmore Chasm
    0x1C1085: [0x1, 0x2, 0x50, 0x3, 0x20, 0x3, ], #FMC 1000 points
    #Lower Path
    0x1C1086: [0x1, 0x2, 0xc0, 0x3, 0x80, 0x4, ], #FMC Low Path Apple
    0x1C1087: [0x1, 0x2, 0xd0, 0x5, 0xb0, 0x3, ], #FMC Low Path 1UP
    0x1C1088: [0x1, 0x2, 0x30, 0x7, 0xb0, 0x3, ], #FMC Low Path 1000 points
    #Upper PAth
    0x1C1089: [0x1, 0x2, 0xa0, 0x2, 0xd0, 0x1, ], #FMC High Path 1000 points
    0x1C108A: [0x1, 0x2, 0xf0, 0x4, 0xc0, 0x1, ], #FMC High Path Apple
    0x1C108B: [0x1, 0x2, 0xa0, 0x7, 0x50, 0x1, ], #FMC High Path Half Apple
    0x1C108C: [0x1, 0x3, 0x70, 0x2, 0xb0, 0x0, ], #FMC Apple Staircase

    #Bloodpool Bridge
    0x1C108D: [0x2, 0x1, 0x80, 0x2, 0x10, 0x1, ], #BPB 1000
    0x1C108E: [0x2, 0x1, 0x60, 0x7, 0xd0, 0x0, ], #HA
    0x1C108F: [0x2, 0x1, 0x50, 0xa, 0x40, 0x1, ], #1UP
    0x1C1090: [0x2, 0x1, 0x30, 0xc, 0x30, 0x1, ], #Apple

    #Bloodpool Castle
    0x1C1091: [0x2, 0x3, 0xd0, 0x1, 0x80, 0x3, ], # Magic 1
    0x1C1092: [0x2, 0x4, 0x80, 0x1, 0x90, 0x1, ], # Apple 1
    0x1C1093: [0x2, 0x5, 0x70, 0x2, 0xc0, 0x3, ], # MAgic 2
    0x1C1094: [0x2, 0x5, 0x0, 0x6, 0xb0, 0x0, ], # 1UP
    0x1C1095: [0x2, 0x7, 0x30, 0x0, 0xc0, 0x0, ], # Apple 2

    #Kasandora Desert
    0x1C1096: [0x3, 0x1, 0x70, 0xB, 0x50, 0x2, ], # Apple 1
    0x1C1097: [0x3, 0x2, 0xC0, 0x3, 0x70, 0x0, ], # Magic
    0x1C1098: [0x3, 0x2, 0xB0, 0x5, 0x80, 0x0, ], # Apple 2
    0x1C1099: [0x3, 0x2, 0xB0, 0x4, 0x80, 0x2, ], # 1UP
    0x1C109A: [0x3, 0x2, 0x20, 0x9, 0x0, 0x2, ], # Apple 3

    #Kasandora Pyramid
    0x1C109B: [0x3, 0x4, 0xB0, 0x3, 0x30, 0x2, ], # Magic
    0x1C109C: [0x3, 0x4, 0x80, 0x2, 0x30, 0x1, ], # 1UP
    0x1C109D: [0x3, 0x4, 0xD0, 0x1, 0x30, 0x1, ], # Apple 1
    0x1C109E: [0x3, 0x5, 0x70, 0x2, 0x30, 0x1, ], # Apple 2

    #Aitos Mountain
    0x1C109F: [0x4, 0x1, 0x10, 0x8, 0xB0, 0x3, ], # Apple 1
    0x1C10A0: [0x4, 0x1, 0x50, 0xD, 0xA0, 0x2, ], # 500 Points
    0x1C10A1: [0x4, 0x1, 0xF0, 0xD, 0x80, 0x3, ], # 1000 Points
    0x1C10A2: [0x4, 0x2, 0x50, 0x3, 0x50, 0x2, ], # Bomb
    0x1C10A3: [0x4, 0x2, 0x50, 0x4, 0x40, 0x2, ], # Apple 2
    0x1C10A4: [0x4, 0x2, 0xE0, 0x5, 0x30, 0x2, ], # Flame Sword

    #Aitos Volcano
    0x1C10A5: [0x4, 0x6, 0x0, 0x5, 0x20, 0x1, ], # Magic
    0x1C10A6: [0x4, 0x6, 0x40, 0x5, 0xC0, 0x2, ], # Apple

    #Marahna Swamp
    0x1C10A7: [0x5, 0x1, 0x50, 0x5, 0xF0, 0x0, ], # Apple
    0x1C10A8: [0x5, 0x1, 0x0, 0x7, 0x40, 0x1, ], # Magic
    0x1C10A9: [0x5, 0x2, 0x10, 0x2, 0xA0, 0x1, ], # Apple 2
    0x1C10AA: [0x5, 0x2, 0x90, 0x3, 0x30, 0x1, ], # 1UP

    # Marahna Temple
    0x1C10AB: [0x5, 0x5, 0xB0, 0x2, 0xA0, 0x0, ], # 1UP
    0x1C10AC: [0x5, 0x6, 0xF0, 0x2, 0x70, 0x3, ], # Apple
    0x1C10AD: [0x5, 0x7, 0x80, 0x6, 0xB0, 0x3, ], # 1UP 2
    0x1C10C3: [0x5, 0x6, 0x10, 0x4, 0x70, 0x6, ], # Hidden Pillar Apple

    #Northwall Cave
    0x1C10AE: [0x6, 0x1, 0xC0, 0x6, 0x80, 0x3, ], # Magic 1
    0x1C10AF: [0x6, 0x2, 0xD0, 0x3, 0xE0, 0x0, ], # 1000 Points 1
    0x1C10B0: [0x6, 0x2, 0xB0, 0x1, 0x40, 0x2, ], # Apple 1
    0x1C10B1: [0x6, 0x2, 0xC0, 0x5, 0xE0, 0x2, ], # 1UP 1
    0x1C10B2: [0x6, 0x3, 0x80, 0x2, 0x60, 0x4, ], # Half Apple
    0x1C10B3: [0x6, 0x3, 0x50, 0x1, 0x60, 0x4, ], # 1UP 2
    0x1C10B4: [0x6, 0x3, 0x70, 0x4, 0xE0, 0x4, ], # 1000 points 2
    0x1C10B5: [0x6, 0x3, 0x70, 0x4, 0xB0, 0x3, ], # Bomb
    0x1C10B6: [0x6, 0x3, 0xF0, 0x2, 0x90, 0x2, ], # Magic 2
    0x1C10B7: [0x6, 0x3, 0x70, 0x1, 0xA0, 0x0, ], # Apple 2

    #Northwall Tree
    0x1C10B8: [0x6, 0x5, 0x30, 0x0, 0x40, 0x0, ], # 1UP
    0x1C10B9: [0x6, 0x5, 0xB0, 0x0, 0xB0, 0x1, ], # 1000 Points 1
    0x1C10BA: [0x6, 0x5, 0x90, 0x2, 0x0, 0x2, ], # Magic
    0x1C10BB: [0x6, 0x5, 0xB0, 0x0, 0x40, 0x2, ], # 500 Pnts 1

    0x1C10BC: [0x6, 0x6, 0xC0, 0x3, 0x60, 0x4, ], #500 Pnts 2
    0x1C10BD: [0x6, 0x6, 0x30, 0x0, 0x50, 0x3, ], #1000 pnts 2
    0x1C10BE: [0x6, 0x6, 0xD0, 0x3, 0x80, 0x2, ], # Apple 1
    0x1C10BF: [0x6, 0x6, 0xE0, 0x3, 0xA0, 0x1, ], # 500 pnts 3
    0x1C10C0: [0x6, 0x7, 0x80, 0x2, 0xC0, 0x2, ], # Apple 2
    0x1C10C1: [0x6, 0x6, 0xB0, 0x2, 0xB0, 0x2, ], # 1UP2
    0x1C10C2: [0x6, 0x6, 0x80, 0x1, 0xF0, 0x4, ], # Half Apple
}

class LocalRom:

    def __init__(self, file, patch=True, vanillaRom=None, name=None, hash=None):
        self.name = name
        self.hash = hash
        self.orig_buffer = None

        with open(file, 'rb') as stream:
            self.buffer = read_snes_rom(stream)
        
    def read_bit(self, address: int, bit_number: int) -> bool:
        bitflag = (1 << bit_number)
        return ((self.buffer[address] & bitflag) != 0)

    def read_byte(self, address: int) -> int:
        return self.buffer[address]

    def read_bytes(self, startaddress: int, length: int) -> bytearray:
        return self.buffer[startaddress:startaddress + length]

    def write_byte(self, address: int, value: int):
        self.buffer[address] = value

    def write_bytes(self, startaddress: int, values):
        self.buffer[startaddress:startaddress + len(values)] = values

    def write_to_file(self, file):
        with open(file, 'wb') as outfile:
            outfile.write(self.buffer)

    def read_from_file(self, file):
        with open(file, 'rb') as stream:
            self.buffer = bytearray(stream.read())



def patch_rom(world: World, rom: LocalRom):
    def randomize_music():
        #rom.write_bytes
        music_pointers = [
            bytearray([0x9F, 0x76, 0x07]), # Pyramid
            bytearray([0x5C, 0xB0, 0x0B]), # Ending
            bytearray([0x27, 0xC0, 0x0B]), # All Over the World
            bytearray([0x7F, 0x14, 0x0C]), # Fillmore
            bytearray([0xFA, 0x54, 0x0C]), # Satan
            bytearray([0xCC, 0x5D, 0x0C]), # Bloodpool ~ Kasandora
            bytearray([0x4B, 0xFA, 0x0C]), # Northwall
            bytearray([0xB8, 0x14, 0x0D]), # Opening
            bytearray([0xE2, 0x69, 0x0D]), # The Beast Appears
            bytearray([0x63, 0x6F, 0x0D]), # Sacrifices
            bytearray([0x70, 0x94, 0x0D]), # Powerful Enemy
            bytearray([0xAB, 0xA2, 0x0D]), # Peaceful World
            #bytearray([0x6B, 0xFD, 0x0D]), # ???
            bytearray([0x88, 0x29, 0x0E]), # Sky Palace 
            #bytearray([0xF2, 0x33, 0x0E]), # ???
        ]
        music_offsets = [
            0x283E4, 0x28407, 0x28696, 0x286B4, 0x286D2, 0x288B7, 0x288DA,                      # Pyramid ~ Marahna
            0x28E36,                                                                            # Ending
            0x28AF7, 0x28B0C, 0x28B36,                                                          # All Over The World
            0x2838E,                                                                            # Fillmore
            0x28BBC, 0x28E16,                                                                   # Satan
            0x28495, 0x284EB, 0x284FB, 0x2850B, 0x2853D, 0x2856F, 0x2858D, 0x28608, 0x28639,    # Bloodpool ~ Kasandora
            0x28A2E, 0x28A59, 0x28A77,                                                          # Northwall
            0x2801A,                                                                            # Opening
            0x287A9, 0x28904, 0x28AA1,                                                          # The Beast Appears
            0x28085, 0x280E2, 0x2813F, 0x2819C, 0x281F9, 0x28256, 0x282DF,                      # Sacrifices
            0x2808B, 0x280E8, 0x28145, 0x281A2, 0x281FF, 0x2825C, 0x282E5,                      # Aitos
            0x28746, 0x2877F, 0x287FF, 0x28814, 0x28837, 0x2895A, 0x2897D, 0x28992, 0x289A7,    # Temple 
            0x28431, 0x285B2, 0x286F0, 0x28861, 0x289D8, 0x28B60,                               # Powerful Enemy
            0x28BB6, 0x28C12, 0x28C68, 0x28CBE, 0x28D14, 0x28D6A, 0x28DC0,                      # Powerful Enemy
            0x28091, 0x280EE, 0x2814B, 0x281A8, 0x28205, 0x28262, 0x282A1,0x282EB, 0x28323,     # Peaceful World
            0x2807F, 0x280DC, 0x28139, 0x28196, 0x281F3, 0x28250, 0x282D9,                      # Birth of People
            #0x28304,                                                                            # Descent
            0x2829B, 0x2831D, 0x28E3C,                                                          # Sky Palace 
        ]

        for offset in music_offsets:
            randtrack = random.choice(music_pointers)
            rom.write_bytes(offset, randtrack)

    def randomize_lairs():

        custom_lair_images = {
            #"image name":[[Top row of bytes],[Bottom Row]]; Replaces the diamond lair image
            "star":[
            [
            0x82, 0xFF, 0x20, 0xFF, 0x0F, 0xFF, 0x9C, 0xFB, 0x37, 0xE8, 0x61, 0xDE, 0xC4, 0xBF, 0xD0, 0xBF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xE0, 0xE0, 0xC0, 0xCC, 0x8C, 0x9F, 0x1F, 0xBF, 0x3F,
            0x8F, 0xFF, 0xFF, 0xF0, 0xE9, 0x1E, 0x82, 0xFD, 0xFF, 0x00, 0x09, 0xF7, 0x94, 0x6F, 0x70, 0x9F,
            0xFF, 0xF0, 0xF0, 0x00, 0x0E, 0x0E, 0xFD, 0xFC, 0x00, 0x00, 0xE7, 0x07, 0x4F, 0x0F, 0x9F, 0x9F],
            [
            0xC2, 0xBF, 0xC2, 0xBD, 0x6F, 0xD0, 0xB2, 0xEF, 0x3E, 0xF9, 0x07, 0xFF, 0x44, 0xFF, 0x10, 0xFF,
            0xBE, 0x3E, 0x99, 0x18, 0xC0, 0x80, 0xE7, 0xC7, 0xF8, 0xE0, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF,
            0xA2, 0x5F, 0x10, 0xEF, 0xFF, 0x00, 0x88, 0xF7, 0x2A, 0xFD, 0xE1, 0x1E, 0xFF, 0xF0, 0x1F, 0xFF,
            0x5F, 0x1F, 0xEF, 0x0F, 0x00, 0x00, 0xF3, 0xF0, 0xFD, 0xFC, 0x0E, 0x0E, 0xF0, 0x00, 0xFF, 0xF0]
            ],
            "smile":[
            [
            0x82, 0xFF, 0x20, 0xFF, 0x0F, 0xFF, 0x9C, 0xFB, 0x30, 0xEF, 0x61, 0xDF, 0xC4, 0xBF, 0xD0, 0xBF,
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF8, 0xF8, 0xE0, 0xE7, 0xC7, 0xDF, 0x9F, 0xBF, 0x3F, 0xBF, 0x3F,
            0x8F, 0xFF, 0xFF, 0xF0, 0xE8, 0x1F, 0x9A, 0xE7, 0x24, 0xDB, 0x2D, 0xDB, 0x78, 0xDF, 0x08, 0xFF,
            0xFF, 0xF0, 0xF0, 0x00, 0x0F, 0x0F, 0xE7, 0xE7, 0xDB, 0xC3, 0xDB, 0xC3, 0xDB, 0xC3, 0xFF, 0xFF],
            [
            0xC2, 0xBF, 0xE0, 0xBF, 0x68, 0xDF, 0xB2, 0xEF, 0x3E, 0xF9, 0x07, 0xFF, 0x44, 0xFF, 0x10, 0xFF,
            0xBF, 0x3F, 0xBF, 0x3F, 0xDF, 0x9F, 0xE7, 0xC7, 0xF8, 0xE0, 0xFF, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF,
            0x82, 0xFF, 0x2C, 0xF3, 0x13, 0xEF, 0x89, 0xF7, 0x2C, 0xFB, 0xE1, 0x1E, 0xFF, 0xF0, 0x1F, 0xFF,
            0xFF, 0xFF, 0xF0, 0xF0, 0xEF, 0xE0, 0xF7, 0xF0, 0xF9, 0xF8, 0x0E, 0x0E, 0xF0, 0x00, 0xFF, 0xF0]
            ],
        }
        # Write custom lair image 
        picked_lair_img = random.choice(list(custom_lair_images.keys()))
        rom.write_bytes(0x639C0, bytearray(custom_lair_images[picked_lair_img][0]))
        rom.write_bytes(0x63BC0, bytearray(custom_lair_images[picked_lair_img][1]))

        lair_images = [
            0x01, # Castle
            #0x02, # Great Tree
            0x03, # X
            0x04, # O
            0x05, # Bat
            0x06, # Diamond
            0x07, # X
            0x08, # O
            0x05, # Bat
            0x0A, # Diamond
            0x0E, # Hole
            0x0F, # Pyramid
            0x10, # Temple
            ]
        monsters = [
            0x12, # Dragon
            0x13, # Bat
            0x14, # Demon
            0x15 # Skull
            ]
        
        # Replace Diamond image with random custom image

        for x in range(24):
            lairoff = 0x1B825 + (x * 9)
            montype = random.choices(monsters, [0.4,0.25,0.2,0.15])[0]
            rom.write_byte(lairoff + 2, random.choice(lair_images)) # Lair Image
            rom.write_byte(lairoff + 3, montype) # Monster Type
            rom.write_byte(lairoff + 4, random.randint(0x1E, 0xC8)) # Action Delay
            if montype == 0x15:
                rom.write_byte(lairoff + 5, random.randint(0x64, 0x8D)) #Respawn Delay
            else:
                rom.write_byte(lairoff + 5, 0x01)

    def randomize_objects():
        obj_tbl_offsets = {
            #Offset:[[Object IDs],[Weights]]
            0x531F4:[[0x02, 0x03, 0x09, 0x1B],[1,1,1,1]], # Forest Sec 1
            0x53261:[[0x02, 0x03, 0x09, 0x1B],[1,1,1,1]], # Forest Sec 2

            0x53313:[[0x0E, 0x0F, 0x14, 0x15, 0x16],[1,1,1,1,1]], # Chasm Room 1
            0x533C0:[[0x0E, 0x0F, 0x14, 0x15, 0x16],[1,1,1,1,1]], # Chasm Room 1 Low
            0x5342F:[[0x0E, 0x0F, 0x14, 0x15, 0x16, 0x17],[1,1,1,1,1,1]], # Chasm Room 2

            0x534CF:[[0x02,0x03,0x04,0x05],[1,0,0,0]], # Bridge Sec 1; Rock Throwers cause the game to crash
            0x53524:[[0x02,0x03,0x04,0x05],[1,0,0,0]], # Bridge Sec 2

            0x5359D:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26],[1,1,1,1,1,1,1,1,1]], # Castle
            0x535D2:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x26],[1,1,1,1,1,1,1,1]], # Castle
            0x5366B:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26],[1,1,1,1,1,1,1,1,1]], # Castle
            0x536AC:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26],[1,1,1,1,1,1,1,1,1]], # Castle
            0x536ED:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26],[1,1,1,1,1,1,1,1,1]], # Castle
            0x53776:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26],[1,1,1,1,1,1,1,1,1]], # Castle
            0x537A1:[[0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x26],[1,1,1,1,1,1,1,1]], # Castle

            0x5383D:[[0x05, 0x06, 0x07, 0x08, 0x09, 0x0A],[1,1,1,1,1,1]], # Desert 1
            0x5389A:[[0x05, 0x06, 0x07, 0x08, 0x09, 0x0A],[1,1,1,1,1,1]], # Desert 2

            0x5391B:[[0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11],[1,1,1,1,1,1]], # Pryamid 1
            0x53966:[[0x13, 0x14, 0x15, 0x16],[1,1,1,1]], # Pryamid 2
            0x53A01:[[0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11],[1,1,1,1,1,1]], # Pryamid 3

            0x53AB1:[[0x03, 0x04, 0x07,0x09, 0x0A, 0x0B, 0x0C],[0,0,1,0,0,1,1]], # Mountain 1
            0x53B2E:[[0x03, 0x04, 0x07,0x09, 0x0A, 0x0B, 0x0C],[0,0,1,0,0,1,1]], # Mountain 2
            0x53B87:[[0x03, 0x04, 0x07,0x09, 0x0A, 0x0B, 0x0C],[0,0,1,0,0,1,1]], # Mountain 3

            0x53BE3:[[0x11, 0x12, 0x13, 0x14, 0x15],[1,1,1,1,1]], # Volcano 1
            0x53C39:[[0x11, 0x12, 0x13, 0x14, 0x15],[1,1,1,1,1]], # Volcano 2
            0x53C67:[[0x11, 0x12, 0x13, 0x14, 0x15],[1,1,1,1,1]], # Volcano 3

            0x53CEB:[[0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C],[1,1,1,1,1,1,1]], # Swamp 1
            0x53D50:[[0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C],[1,1,1,1,1,1,1]], # Swamp 2

            0x53DAC:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple
            0x53DFE:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple
            0x53E46:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple
            0x53E6F:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple
            0x53F27:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple
            0x53F64:[[0x0D, 0x0E, 0x10, 0x12, 0x13, 0x14, 0x20],[1,1,1,1,1,0,1]], # Temple

            0x54047:[[0x09,0x0A,0x0B, 0x0C, 0x0D, 0x0E ],[1,1,1,1,1,1]], # Cave 1
            0x540DB:[[0x09,0x0A,0x0B, 0x0C, 0x0D, 0x0E ],[1,1,1,1,1,1]], # Cave 2
            0x54188:[[0x09,0x0A,0x0B, 0x0C, 0x0D, 0x0E ],[1,1,1,1,1,1]], # Cave 3
            0x541E1:[[0x09,0x0A,0x0B, 0x0C, 0x0D, 0x0E ],[1,1,1,1,1,1]], # Cave 4


            0x5424E:[[0x09, 0x0E, 0x16, 0x19, 0x1A, 0x1B, 0x1C, ],[1,1,1,1,1,1,1]], #Tree 1
            0x542B6:[[0x09, 0x0E, 0x16, 0x19, 0x1A, 0x1B, 0x1C, ],[1,1,1,1,1,1,1]], #Tree 2
            0x5439E:[[0x09, 0x0E, 0x16, 0x19, 0x1A, 0x1B, 0x1C, ],[1,1,1,1,1,1,1]], #Tree 3
        }
        # valid_objects[obj_tbl_offsets.index(table_base)]
        for table_base in obj_tbl_offsets:
            entry = 0
            i = 0
            while rom.read_byte(table_base+ entry) != 00 and  rom.read_byte(table_base+ entry) != 0xFE and rom.read_byte(table_base+ entry) != 0xFF:
                obj_id = rom.read_byte(table_base+ entry + 3)
                if obj_id in obj_tbl_offsets[table_base][0] and world.options.random_object:
                    rom.write_byte(table_base+ entry + 3, random.choices(obj_tbl_offsets[table_base][0],obj_tbl_offsets[table_base][1])[0])
                elif obj_id == 0x80 and world.options.random_orb:
                    rom.write_byte(table_base+ entry + 2, random.randint(0x00, 0x07))
                entry = entry + 4
                i = i + 1
        
    def randomize_palettes():
        colorsets = [
            { #[0] Base 5 Color Set
            #[Darkest -> Lightest]
            "water blue":   [[0x84,0x50], [0x29,0x65], [0xA5,0x6D], [0x48,0x72], [0xEB,0x72]],
            "cloud white":  [[0x04,0x62], [0x0C,0x73], [0x96,0x7B], [0xDB,0x7F], [0xFF,0x7F]],
            "demon red":    [[0x10,0x00], [0x76,0x00], [0x1E,0x00], [0xDC,0x00], [0x3F,0x01]],
            "forest green": [[0xA0,0x00], [0x23,0x01], [0xC7,0x0D], [0xAA,0x16], [0x4D,0x2B]],
            "silver":       [[0xE7,0x1C], [0x8C,0x31], [0x31,0x46], [0x18,0x63], [0xFF,0x7F]],
            "beak yellow":  [[0x10,0x01], [0x73,0x01], [0xF6,0x01], [0xBA,0x02], [0xFF,0x03]],
            "bird white":   [[0xAD,0x2D], [0x4B,0x25], [0x12,0x32], [0x19,0x57], [0xFF,0x6B]],
            "ape skin blue":[[0xE4,0x28], [0x24,0x5D], [0x6A,0x76], [0x9A,0x7F], [0xFF,0x7F]],
            "wood brown":   [[0x66,0x08], [0xCC,0x0C], [0x4F,0x15], [0x94,0x1D], [0x18,0x1E]],
            "flyfish teal": [[0x65,0x1D], [0xE8,0x2D], [0x8C,0x42], [0x2F,0x57], [0x93,0x5F]],
            "lizard green": [[0xA0,0x08], [0x80,0x11], [0x20,0x1A], [0xC0,0x1A], [0x80,0x2B]],
            "deep brown":   [[0x08,0x00], [0xCB,0x14], [0x2F,0x25], [0xD6,0x39], [0xBB,0x4A]], 
            "clay purple":  [[0x00,0x1C], [0x84,0x30], [0x08,0x45], [0x8C,0x59], [0x31,0x6E]],
            "death pink":   [[0x0A,0x00], [0x2F,0x10], [0xB4,0x24], [0x39,0x3D], [0xDF,0x51]],
            
            "orange":       [[0x50,0x01], [0xFF,0x0D], [0x7F,0x32], [0x5F,0x33], [0xBF,0x57]],
            "blood red":    [[0x08,0x08], [0x28,0x10], [0x48,0x18], [0x93,0x24], [0x9C,0x08]],
            "darkness":     [[0x63,0x10], [0xA5,0x1C], [0x29,0x35], [0xCE,0x39], [0x31,0x46]],
            "searorange":   [[0x0a, 0x10], [0x11, 0x18], [0x1f, 0x32], [0xdf, 0x26], [0x7f, 0x37]],
            "metalicpurp":  [[0x0b, 0x30], [0x8e, 0x58], [0x72, 0x59], [0xd9, 0x7e], [0xff, 0x7b]],
            "green2":       [[0x02, 0x31], [0xa2, 0x31], [0x63, 0x2a], [0x85, 0x3f], [0xf3, 0x4b]],
            "blue2":        [[0xc0, 0x34], [0x20, 0x41], [0x82, 0x55], [0x23, 0x76], [0x0e, 0x7f]],
            "snow":         [[0xac, 0x55], [0x84, 0x76], [0x51, 0x7b], [0x5b, 0x7f], [0xbf, 0x7f]],
            "crimson":      [[0x4c, 0x18], [0x13, 0x2d], [0x1a, 0x2d], [0x1e, 0x32], [0xff, 0x7f]],
            "light":        [[0xa8, 0x00], [0x8f, 0x01], [0x56, 0x02], [0x3f, 0x17], [0xff, 0x3b]],
            "iceblue":      [[0xe6, 0x7c], [0x66, 0x7e], [0x4c, 0x7f], [0xd8, 0x7f], [0xff, 0x7b]]
        },
        {
            #[1] 8 color Gradient
            "fire red":     [[0x0C, 0x00], [0x11,0x00], [0x17,0x00], [0x1F, 0x00], [0x5F, 0x01], [0x9F, 0x02], [0x1E, 0x03], [0xFF, 0x23]],
            
            "leaf green":   [[0x01, 0x00], [0xC1,0x00], [0x21,0x1D], [0xC1, 0x2D], [0x21, 0x16], [0x81, 0x3E], [0x41, 0x3F], [0xED, 0x23]],
        },
        {
            #[2] 6 color sets
            "maggot white": [[0x85,0x0C],[0x09,0x1D],[0xCF,0x2D],[0x54,0x42],[0x19,0x57],[0xFF,0x7F]],
            "periwinkle":   [[0x00,0x30],[0x84,0x38],[0x09,0x49],[0xC4,0x65],[0x72,0x7E],[0x7B,0x7F]],
            "ape brown":    [[0x6A,0x00],[0xD0,0x14],[0x35,0x19],[0xB8,0x29],[0x7F,0x26],[0x7F,0x3B]], #[5, 3, 1, 0, 4, 2]
            "dragonfruit":  [[0x66,0x14],[0x2B,0x20],[0x52,0x30],[0x16,0x5C],[0x9F,0x6D],[0x5F,0x7F]],
            "metal":        [[0x59,0x73],[0x06,0x39],[0x48,0x39],[0xCC,0x55],[0x72,0x56],[0xFD,0x7F]],
            "grey":         [[0x84,0x10],[0xE7,0x1C],[0x4A,0x29],[0x10,0x42],[0xF7,0x5E],[0xFF,0x7F]],
            "skull white":  [[0xA5,0x14],[0x29,0x25],[0xEF,0x3D],[0x94,0x52],[0x39,0x67],[0xFF,0x7F]],
            "poison purple":[[0x45,0x10],[0x48,0x14],[0x69,0x14],[0x6A,0x24],[0x6E,0x30],[0xD1,0x30]],
            "fireball red": [[0x13,0x00],[0x19,0x00],[0xDF,0x00],[0x1F,0x02],[0x1F,0x03],[0xFF,0x03]],
            "iceyhot":      [[0x80,0x28],[0x20,0x3D],[0xE0,0x51],[0xE0,0x6A],[0xE0,0x7F],[0xF0,0x7F]],
            "deeporb blue": [[0x00,0x18],[0x20,0x28],[0x60,0x3C],[0xE0,0x4C],[0x60,0x61],[0x20,0x7E]],

        },
        {
            #[3] 3 color sets
            "red":          [[0x13,0x00],[0x17,0x00],[0x1F,0x00]], 
            "orange":       [[0x95,0x28],[0x3F,0x01],[0x3F,0x2E]],
            "cotton candy": [[0xC0,0x71],[0x40,0x7B],[0xF7,0x7F]],
            "bat purple":   [[0xC4,0x28],[0x05,0x35],[0xCC,0x48]],
            "milk":         [[0x91,0x76],[0xB8,0x77],[0xDE,0x7B]],
            "gold":         [[0x3C,0x06],[0x5F,0x03],[0xBF,0x4B]],
            "steel":        [[0x06,0x29],[0x50,0x52],[0x9A,0x7B]],
            "jelly magenta":[[0x0E,0x38],[0x17,0x5C],[0x1F,0x7C]],
            "lime":         [[0xE6,0x01],[0xCC,0x02],[0xF1,0x03]],
        },
        {
            #[4] Sky sets
            #[Cloud dark -> light, Sky dark -> light]
            "day":        [[0x4E,0x7E],[0xB0,0x7A],[0x12,0x7B],[0x14,0x77],[0xF4,0x6E],[0x36,0x73],[0x58,0x77],[0x9A,0x7B],[0xDC,0x7F],
                           [0x42,0x54],[0x84,0x60],[0xC6,0x68],[0x28,0x71],[0x8A,0x79],[0xEC,0x7D]],
            "night":      [[0x48,0x3C],[0x02,0x0C],[0x44,0x1C],[0x03,0x1C],[0x28,0x40],[0x05,0x28],[0x07,0x30],[0x88,0x30],[0xCC,0x44],
                           [0x05,0x18],[0x06,0x24],[0x09,0x28],[0x0A,0x30],[0x2B,0x3C],[0x2B,0x48]],
            "sunset":     [[0x9E,0x53],[0x1E,0x03],[0xC5,0x30],[0xCE,0x3C],[0xD2,0x3C],[0x75,0x39],[0xFC,0x0D],[0x5B,0x12],[0x5F,0x17],
                           [0x42,0x54],[0x85,0x7C],[0x94,0x7C],[0x9D,0x58],[0x5E,0x01],[0xFE,0x1D]],
            "dusk":       [[0xED,0x4D],[0x5C,0x2E],[0x44,0x1C],[0x03,0x1C],[0x04,0x28],[0x03,0x38],[0x45,0x40],[0x0A,0x41],[0x8F,0x61],
                           [0x64,0x1C],[0x85,0x24],[0x85,0x34],[0x85,0x44],[0xC8,0x4C],[0x47,0x4D]],
            "sunrise":    [[0xEA,0x52],[0x39,0x33],[0xC5,0x28],[0x83,0x2C],[0x83,0x34],[0x03,0x45],[0x44,0x4D],[0xCA,0x4D],[0x4D,0x6A],
                           [0x82,0x3C],[0x65,0x54],[0xE2,0x58],[0x26,0x59],[0x47,0x61],[0x24,0x62]],


        },
        {
            #[5] Text Colors
            "standard": [[0x33,0x7F],[0xFF,0x7F]],
            "sp":       [[0xDF,0x22],[0xFF,0x7F]],
            "peanut":   [[0x5F,0x3F],[0xFF,0x7F]],
            "neon":     [[0xDF,0x48],[0x5F,0x66]],
            "rice":     [[0x39,0x67],[0xFF,0x7F]],
            "argon":    [[0xE8,0x52],[0xF1,0x5B]],
            "glowstick":[[0xB0,0x7D],[0x0E,0x7F]],
            "strawby":  [[0x1F,0x72],[0xFF,0x7F]],
            "wildfire": [[0x1C,0x0C],[0x9F,0x3A]],
            "banana":   [[0x7F,0x27],[0xFF,0x7F]],
            "seafoam":  [[0xCC,0x4B],[0xFF,0x7F]],
            "mint":     [[0x2C,0x63],[0xFF,0x7F]],
            "plain":    [[0x38,0x7E],[0xFF,0x7F]],
            "demon":    [[0x97,0x54],[0xDF,0x7C]],
            "jeans":    [[0x88,0x71],[0xB0,0x72]],
            "champagne":[[0xFD,0x26],[0xBD,0x57]],
            "snowball": [[0x8A,0x77],[0xBD,0x6F]],

        },
        {
            #[6] Water
            "standard": [[0x29,0x65],[0xA5,0x6D],[0x48,0x72],[0xEB,0x72]],
            "bright":   [[0x29,0x7F],[0x93,0x7F],[0xB8,0x7F],[0xFD,0x7F]],
            "blood":    [[0x2E,0x08],[0x4E,0x14],[0xF2,0x2C],[0xD6,0x39]],
            "green":    [[0xC0,0x6F],[0xF2,0x6F],[0xF8,0x77],[0xFD,0x7F]],
            "blueblue": [[0x09,0x62],[0x6C,0x6A],[0xED,0x7E],[0x53,0x7F]],


            
        }
        
        ]
        single_color = [
            #[0x1C, 0x00], # Red
            [0xDC, 0x02], # Yellow
            [0x33, 0x7F], # Cyan
            [0xDF, 0x22], # Gold
            [0x5F, 0x42], # Pink
            [0x44, 0x02], # Green
            [0xCC, 0x48], # Purple
            [0xA5, 0x6D], # Blue
            [0xCE, 0x39], # Grey
            [0x84, 0x50], # Deep Blue
            [0x1E, 0x11], # Traffic Orange
            [0x98, 0x32], # Sand Yellow
            [0xB5, 0x0C], # Flame Red
            [0x43, 0x41], # Capri Blue
            [0x43, 0x15], # Pearl Green
            [0xD8, 0x3E], # Beige
            [0xD9, 0x38], # Telemagenta
            [0x11, 0x15], # Copper brown
            [0xC7, 0x46], # Mint
            [0x18, 0x63], # Silver 
            [0x5A, 0x1A], # Gold
            [0x8B, 0x69], # Indigo
            [0x88, 0x5E], # Teal
            [0xFD, 0x6E], # Pink
            [0x10, 0x02], # Olive
            [0x5B, 0x1C], # Crimson
            [0x08, 0x5A], # Steel Blue
            [0xFF, 0x29], # Coral

        ]
        pal_sources = {
            # Offset: [pallete set index, [Shade index]]
            # 5 colors
            0x10F90: [0, [18]], #HP
            
            0x3D04C: [0, [4,3,2,1,16,0]], # Master Armor
            0x3D072: [0, [3,16,16,16,1,0,4]], #Angel Orb Stand
            
            0x5826C: [0, [4,3,2,1,16,0]], # Master Armor
            0xE6524: [0, [4,3,2,1,16,0]], # Master Armor

            0x58138: [0, [4,3,1,0]], # Dagobah Accents
            
            0xE3CAF: [0, [1,2]], # Angel Hair
            0xE3CB7: [0, [0, 1, 2, 16, 3, 4]], # Demon
            0xE3CD9: [0, [0, 16, 16, 1, 2, 18, 3, 4]], # Dragon/ Cloud
            0xE40C3: [0, [0,1,2,3,4]], # Sky Temple
            0xE4F04: [0, [0,1,4,3,2]], # Blue Goblin Skin
            0xE4F0E: [0, [4,3,2,1,0]], # Blue Goblin Armor
            0xE4F26: [0, [4,3,2,1,0]], # Tree Enemies
            0xE4F3C: [0, [4,3,2,1]],    # Dark Ape Skin
            0xE4F5C: [0, [4,3,2,1,0]], # Bird Beak
            0xE4F66: [0, [4,3,2,1,0]], # Bird Body
            0xE507C: [0, [4,3,2,1,0]], # Troll
            0xE50BC: [0, [4,3,2,1,0]], # Cave Troll
            0xE50EA: [0, [4,3,1,0]], # DemonMouth Fireball
            0xE513A: [0, [1,4,2,16,16,16,16,16,16,0,1]], # Minotaurus Axe
            0xE527C: [0, [4,3,2,1,16,0]], # Bloodbird
            0xE52AC: [0, [4,3,2,1,0]], # Flyfish Wings
            0xE52BC: [0, [4,3,2,1,0]], # Rock Thrower Clothes
            0xE52CE: [0, [4,3,1,0]], # Rock Thrower Skin
            0xE52DC: [0, [4,3,2,1,0,16,16,16,16,4]], # Lizardman Skin
            0xE52E6: [0, [4,3,1,0]], # Lizardman Armor
            0xE53C4: [0, [1,0,4,3,2]], # Bloodpool Goblin Skin
            0xE53CE: [0, [4,3,2,1,0]], # Bloodpool Goblin Armor
            0xE53DA: [0, [4,3,1,0]],    # Bloodpool Stone Platforms
            0xE53E8: [0, [4,3,2,1,0]], # Electric Prong
            0xE547C: [0,  [4,3,1,0]],    # Zeplin Wolf Cloak
            0xE54D0: [0, [4,3,1,0]],    # Zeplin Wolf Lightning
            0xE5622: [0, [4,3,2,1,0]], # Fireman Aura
            0xE562C: [0, [2,1,0,4]], # Sand Flower Vine
            0xE5642: [0, [4,3,2,1,0]], # Scorebee Lower Body
            0xE564C: [0, [4,3,1,0,2,18]],    # Scorebee Upper Body
            0xE5664: [0, [1,0,4,3,2]], # Kasandora Goblin Skin
            0xE566E: [0, [4,3,2,1,0]], # Bloodpool Goblin Armor
            0xE5788: [0, [4,3,2,1,0]], # Snake Stripe 2
            0xE57C8: [0, [4,3,2,1,0]], # Blue Birdgod Skin
            0xE583C: [0, [4,3,2,1,0]], # Scorman Tail
            0xE5846: [0, [4,3,2,1,0]], # Scorman Body
            0xE5850: [0, [4,3,1,0]], # Scorman Feet
            0xE597C: [0, [0,4,3,2,1]], #Aitos Platform Birds
            0xE59BC: [0, [4,3,2,1,0]], #Black Rock Thrower Clothes
            0xE59DC: [0, [4,3,2,1,0]], # Tengu Mask
            0xE59E6: [0, [4,3,2,1, 16, 16, 16, 16, 0]], # Tengu Body
            0xE5C6E: [0, [4,3,2,1,0]], # Volcano Goblin Armor
            0xE5C7C: [0, [4,3,2,1,0]], # Flame Wheel Flames
            0xE5C86: [0, [4,3,2,1,0]], # Flame Wheel Spokes
            0xE5D7C: [0, [4,3,2,1,0]], # Tribeman Skin
            0xE5DE8: [0, [4,3,2,1,0]], # Headless Spear Man
            0xE5F1C: [0, [4,3,2,1,0]], # Death Cloak
            0xE5F3C: [0, [4,3,2,1,0]], #Serpent Man Scales
            0xE5F46: [0, [4,3,2,1,0]], # Serpent Man Belly
            0xE60FC: [0, [4,3,2,1,0]], # Icebat
            0xE613C: [0, [4,3,2,1,0]], # Snowman Skin
            0xE6146: [0, [3,2,1,0]], # Snowman Cloth
            0xE614E: [0, [4,3,2,1,0]], # Eyeball Retna
            0xE6286: [0, [1,2,3,4]], # Gold Bubble
            0xE62A4: [0, [0,1,2,3,4]], # Catapiller
            0xE62C6: [0, [0,1,2,3,4]], # Blue Bubble
            0xE62DC: [0, [4,3,2,16,16,16,16,16,16,16,16,1,0]], # Eyeball Tree
            0xE62E2: [0, [2,1,16,16,16,16,4,3,16,16,0]], # Tree Eyeball Retna
            0xE62E5: [0, [0,1,3,4]], # Snowman Clothes
            


            
            # 6 colors
            0x3D002: [2, [5,4,3,2,1,0]], # Stardust Projectile
            0x3D061: [2, [5,4,3,2,1,0]], #Sword Swing
            0x3D080: [2, [0,1,2,3,4,5]], # Angel Orb Sphere
            0x58002: [2, [0,5,4,3,2,1]],
            0x580A4: [2, [5,4,3,2,1,0]], # Manticore Body
            0xE3C35: [2, [0,1,2,3,4,5]], # Temple 1
            0xE3CDB: [2, [0, 1, 16,16,16,16,16,16,2,3,4,5]], # Skullhead
            0xE3D10: [2, [0,1,2,3,4,5]], # Angel Orb Sphere
            0xE3E30: [2, [0,1,2,3,4,5]], # Temple 2
            0xE40B7: [2, [0,1,2,3,4,5]], # Sky Temple Ground
            0xE4F46: [2, [5,3,1,0,4,2]], # Ape Fur
            0xE5086: [2, [5,4,3,2,1,0]], # Chasm Skeletons
            0xE50DC: [2, [5,4,3,2,1,0]], # Maggot
            0xE50FA: [2, [0,5,4,3,2,1,16,16,16,16,16,16,16,16,16,16,0,5,4,3,2,1]], #Minotaurus Skin
            0xE51C8: [2, [0,1,2,3,4,5]], # Bloodpool Poisoned Stage Water
            0xE529C: [2, [5,4,3,2,1,0]], # Flyfish Body
            0xE537C: [2, [5,4,3,2,1,0]], # Bloodpool Skeletons
            0xE538C: [2, [5,4,3,2,1,0]], # Gargoyle Fireball
            0xE53A0: [2, [5,4,3,2,1,0]], # Slime
            0xE53AC: [2, [5,4,3,2,1,0]], # Gargoyle Statue
            0xE54AC: [2, [5,4,3,2,1,0]], # Zeplin skull shot
            0xE54DC: [2, [5,4,3,2,1,0]], # Zeplin Wolf Fur
            0xE577A: [2, [18,5,4,3,2,1,0]], # Snake Stripe 1
            0xE57A0: [2, [5,4,3,2,1,0,18,1,0]], # Mummy
            0xE57BC: [2, [5,4,3,2,1,0]], #Blue Birdgod Accents
            0xE582C: [2, [5,4,3,2,1,0]], # Wisp Body
            0xE585C: [2, [5,4,3,2,1,0]], # PHaroh Gold
            0xE599C: [2, [5,4,3,2,1,0]], #Bamboo
            0xE59CC: [2, [1,5,4,3,2,0]], # Boulder
            0xE5C3C: [2, [5,4,3,2,1,0]], # Archer Armor
            0xE5CBE: [2, [5,4,3,2,1,0]], # Flame Wheel Shot
            0xE5D86: [2, [3,2,1,0,16,16,16,5,4]], # Totem 
            0xE5EFC: [2, [5,4,3,2,1,0]], # Blue Orb
            0xE5F7A: [2, [1,16,16,16,16,16,16,4,16,5,3,2,0]], # Kalia Skin
            0xE627C: [2, [5,16,4,1,3,16,16,16,16,16,2,0]], # Hawk
            0xE6500: [2, [2,0,1,3,4,5]], #Dheim Dragon Crystals

            # 3 colors
            0x10F94: [3, [0,1,2]], # Heart
            0x3D048: [3, [1, 0, 16, 16, 16, 16, 2]], # Master Armor Accent
            0x58268: [3, [1, 0, 16, 16, 16, 16, 2]], # Master Armor Accents
            0xE6520: [3, [1, 0, 16, 16, 16, 16, 2]], # Master Armor Accent
            0x3D05C: [3, [1,0]], # Master Sword Color
            0x5827C: [3, [1,0]], # Master Sword Color
            0xE6534: [3, [1,0]], # Master Sword Color
            0xE3C97: [3, [0,1,2]], # Angel Wings
            0xE4097: [3, [0,1,2]], # Angel Wings
            0xE3C9F: [3, [0,1,2]], # Angel Skin
            0xE3CA5: [3, [0,1,2]], # Angel Arrow

            0x580B4: [3, [2,1,0]], # Manticore Mane
            0x580BA: [3, [2,1,0]], # Manticore Talons
            0xE3CCD: [3, [0,1,2]], # Bat
            0xE3E8D: [3, [0,1,2]], # Steel Border 
            0xE3F8D: [3, [0,1,2]], # Steel Border Sky
            0xE3C8D: [3, [0,1,2]], # Steel Border
            0xE3DAD: [3, [0,1,2]], # Steel Border
            0xE501A: [3, [1,16,16,16,16,2,0]], #Minotaurus Thong
            0xE501C: [3, [0,1,2]], # Minotarus Bands
            0xE5092: [3, [0,1,2]], # Skullbat Wing
            0xE50EC: [3, [0,1,2]], # Maggot Leg
            0xE5484: [3, [2,1,0]], # Zeplin Wolf Skin
            0xE548A: [3, [2,1]], # Zeplin Wolf Shoulders
            0xE548E: [3, [2,16,16,16,1]], # Zeplin Clothes
            0xE5490: [3, [2,1,0]], # Zeplin Wolf Hair
            0xE561C: [3, [2,1,0]], # Fireman
            0xE563C: [3, [2,1,0]], # Scorbee Wings
            0xE5634: [3, [1,0]],   # Sandflower Spines
            0xE57B2: [3, [1,0,2]], # Arrow Feather
            0xE57E0: [3, [1,0,2]], # Platform Accent
            0xE57FE: [3, [2,1,0]], # Jellybean
            0xE5868: [3, [2,1,0]], # Pharoh Stripes
            0xE5988: [3, [0,2,1]], # Bird Platform Highlights
            0xE5C52: [3, [2,1,0]], # Weapon Accents
            0xE5C92: [3, [2,1,0]], # Flame Wheel Horns
            0xE5D8E: [3, [2,1,0]], # Tribal Hair
            0xE5F12: [3, [2,1,0]], # Orb Lightning
            0xE5F32: [3, [2,1,0]], # Death Scythe
            0xE5F82: [3, [2,16,16,16,16,16,16,16,16,16,0,1]], # Kaliah Golds
            0xE5F82: [3, [2,1,0]], # Kaliah Accents
            0xE5FC2: [3, [2,1,0]], # Kaliah Spear Tassle
            0xE5FCA: [3, [2,1,0]], # Kaliah Arrow
            

            # Sky
            0xE3ED5: [4, [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]], # Sky

            # Text
            0x10F80: [5, [0,1]], #Text
            0x10F88: [5, [0,1]], #Text

            # Water
            0xE3BBF: [6, [18, 0,1,2,3]], #Lair/ Water
            0xE3DBF: [6, [18, 0,1,2,3]], #Lair/ Water
            0xE3DFF: [6, [18, 0,1,2,3]], #Lair/ Water
            0xE3C21: [6, [0,1,2,3]], #Blood Water
        }

        for object in pal_sources:
            rand_colorset = random.choice(list(colorsets[pal_sources[object][0]].keys()))
            i = 0
            for clrinx in pal_sources[object][1]:
                if clrinx == 18:
                    color = random.choice(single_color)
                    rom.write_bytes(object+i,bytearray(color))
                elif clrinx == 16:
                    i = i+2
                    continue
                elif clrinx == 17:
                    rom.write_bytes(object+i,bytearray([0x00,0x00]))
                else:
                    color = colorsets[pal_sources[object][0]][rand_colorset][clrinx]
                    rom.write_bytes(object+i,bytearray(color))
                i=i+2
                    
    
    # Randomized Options
    if world.options.random_lair:
        randomize_lairs()
    if world.options.random_music:
        randomize_music()
    if world.options.random_object or world.options.random_orb:
        randomize_objects()
    if world.options.random_color:
        randomize_palettes()

    # instant default message speed
    rom.write_byte(0x13E5B, 0x00)

    # Free up AP RAM space
    rom.write_bytes(0x12E0,  bytearray([0xE0, 0x60, 0x13])) #CPX #$1360
    #This will stop the game from clearing the last 160 bytes in the enemy table in platformer segements
    #To make room for AP stuff at 0x1A00-0x1A9F

    #Jump to AP ram setup routine
    rom.write_bytes(0x37, bytearray([0x22, 0x00, 0x88, 0x1F]))  #JSL $1F8800
    
    #Jump to Item handling routine
    rom.write_bytes(0x12C69, bytearray([0x22, 0x10, 0x80, 0x1F]))  #JSL $1F8010 (from civ segments)
    rom.write_bytes(0xDB, bytearray([0x22, 0x60, 0x80, 0x1F]))  #JSL $1F8060 (from action stages)

    #Allow item handling in action stages
    #Also allows exiting stage
    rom.write_bytes(0xF8060, bytearray([
        0x22, 0x82, 0xBC, 0x02, 	#	  JSL proc_decrementStageTimer
            #	  ;8bit A 16bit XY
        0xA5, 0xA0, 	#	  LDA $A0
        0x29, 0x30, 	#	  AND #$30
        0xD0, 0x03, 	#	  BNE checksel
            #	  exit:
        0x4C, 0x10, 0x80, 	#	  JMP $8010
            #	  checksel:
        0xA5, 0xA1, 	#	  LDA $A1
        0x29, 0x20, 	#	  AND #$20
        0xF0, 0xF7, 	#	  BEQ exit
        0x64, 0x19, 	#	  STZ $19
        0x64, 0x1B, 	#	  STZ $1B
        0xA9, 0x07, 	#	  LDA #$07
        0x85, 0x1A, 	#	  STA $1A
        0x80, 0xED, 	#	  BRA exit
    ])) #JSL proc_decrementStageTimer -> BRA $8014

    #Jump to item check routines
    rom.write_bytes(0x892D, bytearray([0x20, 0xEA, 0x90 ])) #JSR $90EA

    #for levelup routine
    rom.write_bytes(0x1B3BD, bytearray([0xAF, 0x40, 0x1A, 0x7E ])) #LDA $1A40

    #levelup checks
    rom.write_bytes(0x1B3D4, bytearray([
        0xDA, 
        0x8B, 
        0xA9, 0x7E, 0x00, 
        0x48, 
        0xAB, 
        0xAD, 0x40, 0x1A, 
        0x3A, 
        0xAA, 
        0x1A, 
        0x1A, 
        0x8D, 0x40, 0x1A, 
        0xA9, 0x01, 0x00, 
        0xE0, 0x00, 0x00, 
        0xF0, 0x04, 
        0x0A, 
        0xCA, 
        0x80, 0xF7, 
        0x0D, 0x10, 0x1A, 
        0x8D, 0x10, 0x1A, 
        0xAB, 
        0xAB, 
        0xFA, 
        0xC2, 0x20, 
        0xE8, 
        0xE8, 
        0xBF, 0x0E, 0xB4, 0x03, 
        0x28, 
        0x18, 
        0x60
    ]))

    #Item handleing routine
    rom.write_bytes(0xF8010, bytearray([
        0x22, 0x56, 0xBC, 0x02, 	#	JSL $02BC56
        0x08, 	#	PHP
        0xE2, 0x30, 	#	SEP #$30 ;8bit AXY
        0x48, 	#	PHA
        0xDA, 	#	PHX
        0xAD, 0x08, 0x1A, 	#	LDA $1A08
        0x8D, 0x0E, 0x1A, 	#	STA $1A0E
        0xF0, 0x0E, 	#	BEQ return
        0x0A, 	#	ASL
        0xAA, 	#	TAX
            #	
        0xFC, 0x00, 0x85, 	#	JSR ($8500, X)
        0xA9, 0x1C, 	#	LDA #$1C
        0x02, 0x00, 	#	COP #$00
        0x20, 0x60, 0x8A, 	#	JSR $8A60
        0x80, 0x0F, 	#	BRA returnmain
            #	return:
        0xAD, 0x09, 0x1A, 	#	LDA $1A09
        0xF0, 0x0A, 	#	BEQ returnmain
        0xC9, 0x01, 	#	CMP #$01
        0xF0, 0x03, 	#	BEQ cleartext
        0x3A, 	#	DEC
        0x80, 0x03, 	#	BRA returnmain
            #	cleartext:
        0x20, 0xA0, 0x8A, 	#	JSR $8AA0
            #	returnmain:
        0x8D, 0x09, 0x1A, 	#	STA $1A09
        0x9C, 0x08, 0x1A, 	#	STZ $1A08
        0xAD, 0x0C, 0x1A, 	#	LDA $1A0C
        0xD0, 0x0D, 	#	BNE nx
            #	
        0x9C, 0x0D, 0x1A, 	#	STZ $1A0D
        0xAD, 0x0A, 0x1A, 	#	LDA $1A0A
        0x29, 0x02, 	#	AND #$02
        0xF0, 0x09, 	#	BEQ exit
        0x20, 0x90, 0x80, 	#	JSR $8090
            #	nx:
        0xCE, 0x0C, 0x1A, 	#	DEC $1A0C
        0x9C, 0x0A, 0x1A, 	#	STZ $1A0A
            #	exit:
        0xFA, 	#	PLX
        0x68, 	#	PLA
        0x28, 	#	PLP
        0x6B,	#	RTL


    ]))

    #Recieve Item Text Rotuine
    rom.write_bytes(0xF8A60, bytearray([
        0x8B, 	#	  PHB
        0xA9, 0x1F, 	#	  LDA #$1F
        0x48, 	#	  PHA
        0xAB, 	#	  PLB
        0xC2, 0x30, 	#	  REP #$30
        0xA0, 0x00, 0x9A, 	#	  LDY #$9A00
        0xA9, 0x01, 0x1A, 	#	  LDA #$1A01
        0x22, 0x60, 0xBF, 0x02, 	#	  JSL $02BF60
        0xAD, 0x0E, 0x1A, 	#	  LDA $1A0E
        0x0A, 	#	  ASL
        0x0A, 	#	  ASL
        0x0A, 	#	  ASL
        0x0A, 	#	  ASL
        0x0A, 	#	  ASL
        0x18, 	#	  CLC
        0x69, 0x00, 0x90, 	#	  ADC #$9000
        0xA8, 	#	  TAY
        0xA9, 0x09, 0x1A, 	#	  LDA #$1A09
        0x22, 0x60, 0xBF, 0x02, 	#	  JSL $02BF60
        0xAB, 	#	  PLB
        0xE2, 0x30, 	#	  SEP #$30
        0xA9, 0xA0,     #   LDA #$A0
        0x8D, 0x09, 0x1A, #  STA $1A09
        0x60,	#	  RTS

    ]))
    #Clear Recieve Item Text
    rom.write_bytes(0xF8AA0, bytearray([
        0x8B, 	#	  PHB
        0xA9, 0x1F, 	#	  LDA #$1F
        0x48, 	#	  PHA
        0xAB, 	#	  PLB
        0xC2, 0x30, 	#	  REP #$30
        0xA0, 0x00, 0x90, 	#	  LDY #$9000
        0xA9, 0x01, 0x1A, 	#	  LDA #$1A01
        0x22, 0x60, 0xBF, 0x02, 	#	  JSL $02BF60
        0xAB, 	#	  PLB
        0xE2, 0x30, 	#	  SEP #$30
        0xA9, 0x00,     # LDA #$00
        0x60, 	#	  RTS

    ]))

    #Death Link
    rom.write_bytes(0xF8090, bytearray([
        0xA9, 0xB4, 	#	LDA #$FF
        0x8D, 0x0C, 0x1A, 	#	STA $1A0C
        0xA5, 0x18, 	#	LDA $18
        0xF0, 0x07, 	#	BEQ angel_dl
            #	
        0xA9, 0x53, 	#	LDA #$53
        0x8D, 0xD0, 0x08, 	#	STA $08D0
        0x80, 0x09, 	#	BRA return
            #	
            #	angel_dl:
        0xA9, 0x00, 	#	LDA #$00
        0x8D, 0x86, 0x02, 	#	STA $0286
        0xA9, 0x07,     # LDA #$07
        0x85, 0x1A,     # STA $1A
            #	
            #	return:
        0xAD, 0x0A, 0x1A, 	#	LDA $1A0A
        0x29, 0x01, 	#	AND #$01
        0x8D, 0x0A, 0x1A, 	#	STA $1A0A
        0x60, 	#	RTS

    ]))

    #Jump to send death
    rom.write_bytes(0x1CE8, bytearray([0x22, 0xC0, 0x80, 0x1F, 0xEA, 0xEA]))

    #Send Death
    rom.write_bytes(0xF80C0, bytearray([
        0x09, 0x40, 0x00, 	#	  ORA #$0040
        0x9D, 0x30, 0x00, 	#	  STA $0030,X
        0x48, 	#	  PHA
        0xE2, 0x20, 	#	  SEP #$20 ;8bit A
        0xAD, 0x0C, 0x1A, 	#	  LDA $1A0C
        0x25, 0x1D, 	#	  AND $1D ;Make HP and Death timer is 0
        0xD0, 0x09, 	#	  BNE return
        0x1A, 	#	  INC
        0x8D, 0x0D, 0x1A, 	#	  STA $1A0D ;Local Death
        0xA9, 0x09, 	#	  LDA #$F0
        0x8D, 0x0C, 0x1A, 	#	  STA $1A0C
        0xC2, 0x20, 	#	  REP #$20
        0x68, 	#	  PLA
        0x6B,	#	  RTL
    ]))

    #Individual Item Routines
    rom.write_bytes(0xF8100, bytearray([
        0x60, 0xA2, 0x00, 0xBD, 0x99, 0x02, 0xF0, 0x03, 0xE8, 0x80, 0xF8, 0xAD, 0x0E, 0x1A, 0x9D, 0x99,
        0x02, 0x60, 0xEE, 0x45, 0x1A, 0x60, 0xEA, 0xEA, 0xAD, 0xAB, 0x02, 0x1A, 0x8D, 0xAB, 0x02, 0x60,
        0xAD, 0x95, 0x02, 0x1A, 0x8D, 0x95, 0x02, 0xA5, 0x21, 0x1A, 0x85, 0x21, 0x60, 0xEA, 0xEA, 0xEA,
        0xA2, 0x00, 0xBD, 0xA2, 0x02, 0xF0, 0x03, 0xE8, 0x80, 0xF8, 0xAD, 0x0E, 0x1A, 0x9D, 0xA2, 0x02,
        0x60, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xAD, 0x91, 0x02, 0x0A, 0xAA, 0xAD, 0x91, 0x02, 0x1A, 
        0x8D, 0x91, 0x02, 0xA5, 0x1E, 0xC9, 0x18, 0xB0, 0x18, 0x1A, 0x85, 0x1E, 0x8D, 0x87, 0x02, 0xAD,
        0x86, 0x02, 0x1A, 0x8D, 0x86, 0x02, 0xC2, 0x20, 0xBF, 0x32, 0xB4, 0x03, 0x8D, 0x84, 0x02, 0xE2,
        0x20, 0x60, 0xA5, 0x1E, 0x85, 0x1D, 0xAD, 0x87, 0x02, 0x8D, 0x86, 0x02, 0x60, 0xEA, 0xEA, 0xEA,
        0xAD, 0x0E, 0x1A, 0x38, 0xE9, 0x20, 0xAA, 0xA9, 0x01, 0xE0, 0x00, 0xF0, 0x04, 0x0A, 0xCA, 0x80,
        0xF8, 0x0D, 0x44, 0x1A, 0x8D, 0x44, 0x1A, 0x60,
    ]))

    #Recieve Magic
    rom.write_bytes(0xF8230, bytearray([
        0xA2, 0x00, 	#	    LDX #$00
	        #	  nextspell:
        0xBD, 0x99, 0x02, 	#	  LDA $0299,X
        0xCD, 0x0E, 0x1A, 	#	  CMP $1A0E
        0xF0, 0x1B, 	#	  BEQ return ;Already have spell
        0xE8, 	#	  INX
        0xE0, 0x04, 	#	  CPX #$04
        0xF0, 0x02, 	#	  BEQ findslot
        0x80, 0xF1, 	#	  BRA nextspell
            #	  findslot:
        0xA2, 0x00, 	#	  LDX #$00
            #	  nextslot:
        0xBD, 0x99, 0x02, 	#	  LDA $0299,X
        0xF0, 0x07, 	#	  BEQ foundslot
        0xE8, 	#	  INX
        0xE0, 0x04, 	#	  CPX #$04
        0xF0, 0x08, 	#	  BEQ return
        0x80, 0xF4, 	#	  BRA nextslot
            #	  foundslot:
        0xAD, 0x0E, 0x1A, 	#	  LDA $1A0E
        0x9D, 0x99, 0x02, 	#	  STA $0299,X
            #	  return:
        0x60	#	  RTS
    ]))

    #Recieve Offering
    rom.write_bytes(0xF8260, bytearray([
        0xA2, 0x00, 	#	  LDX #$00
            #	  nextslot:
        0xBD, 0xA2, 0x02, 	#	  LDA $02A2,X
        0xF0, 0x07, 	#	  BEQ foundslot
        0xE8, 	#	  INX
        0xE0, 0x08, 	#	  CPX #$08
        0xF0, 0x09, 	#	  BEQ noslots
        0x80, 0xF4, 	#	  BRA nextslot
            #	  foundslot:
        0xAD, 0x0E, 0x1A, 	#	  LDA $1A0E
        0x9D, 0xA2, 0x02, 	#	  STA $02A2,X
            #	  toobad:
        0x60, 	#	  RTS
            #	  noslots:
        0xA2, 0x00, 	#	  LDX #$00
            #	  nextexslot:
        0xBD, 0x30, 0x1A, 	#	  LDA $1A30, X
        0xF0, 0x07, 	#	  BEQ foundexslot
        0xE8, 	#	  INX
        0xE0, 0x0F, 	#	  CPX #$0F
        0xF0, 0xF3, 	#	  BEQ toobad
        0x80, 0xF4, 	#	  BRA nextexslot
            #	  foundexslot:
        0xAD, 0x0E, 0x1A, 	#	  LDA $1A0E
        0x9D, 0x30, 0x1A, 	#	  STA $1A30, X
        0x60,	#	  RTS

    ]))
    rom.write_bytes(0x8D00, bytearray([0x22, 0x42, 0x83, 0x1F])) #JSL $1F8342
    # Backup Inventory Shift Rotuine 
    rom.write_bytes(0xF8342, bytearray([
        0xA9, 0x07, 	#	  LDA #$07
        0x02, 0x00, 	#	  COP #$00
        0xAD, 0x30, 0x1A, 	#	  LDA $1A30
        0xD0, 0x01, 	#	  BNE findslot
        0x6B, 	#	  RTL
            #	  findslot:
        0xDA, 	#	  PHX
        0xA2, 0x00, 0x00, 	#	  LDX #$0000
            #	  nextslot:
        0xBD, 0xA2, 0x02, 	#	  LDA $02A2, X
        0xF0, 0x08, 	#	  BEQ foundslot
        0xE8, 	#	  INX
        0xE0, 0x08, 0x00, 	#	  CPX #$0008
        0xF0, 0x19, 	#	  BEQ xreturn
        0x80, 0xF3, 	#	  BRA nextslot
            #	  foundslot:
        0xAD, 0x30, 0x1A, 	#	  LDA $1A30
        0x9D, 0xA2, 0x02, 	#	  STA $02A2, X
        0xA2, 0x00, 0x00, 	#	  LDX #$0000
            #	  cyclebackup:
        0xBD, 0x31, 0x1A, 	#	  LDA $1A31,X
        0x9D, 0x30, 0x1A, 	#	  STA $1A30,X
        0xE8, 	#	  INX
        0xE0, 0x0F, 0x00, 	#	  CPX #$000F
        0xF0, 0x02, 	#	  BEQ xreturn
        0x80, 0xF2, 	#	  BRA cyclebackup
            #	  xreturn:
        0xFA, 	#	  PLX
        0x6B,	#	  RTL

    ]))
    #Recieve Civ Level up
    rom.write_bytes(0xF8198, bytearray([
        0xAD, 0x0E, 0x1A, 	# LDA $1A0E
        0x38, 	            # SEC
        0xE9, 0x18, 	    # SBC #$18
        0x0A, 	            # ASL
        0xAA, 	            # TAX
        0xBD, 0x2E, 0x02,   # LDA $022E,X
        0x1A,               # INC

        0xC9, 0x03,         # CMP #$03
        0x90, 0x02,         # BCC store
        0xA9, 0x03,         # LDA #$03
        0x9D, 0x2E, 0x02,   # STA $022E,X
        0x60,	            # RTS
    ]))

    #Recieve Flame Sword
    rom.write_bytes(0xF8141, bytearray([
        0xA9, 0x80,         # LDA #$80
        0x8D, 0x4A, 0x1A,   # STA $1A4A
        0x60                # RTS
    ]))

    #Flame Sword Usage
    rom.write_bytes(0xF82B0, bytearray([
        0xAD, 0x4A, 0x1A, 	#	  LDA $1A4A
        0xD0, 0x05, 	#	  BNE return
        0xA5, 0xE4, 	#	  LDA $E4
        0x29, 0xFF, 0x00, 	#	  AND #$00FF
            #	  return:
        0x6B	#	  RTL

    ]))

    #Recieve Progressive Arrow
    rom.write_bytes(0xF8112, bytearray([0xEE, 0x45, 0x1A, 0x60])) #$INC $1A45

    #Recieve Death Crystal
    rom.write_bytes(0xF81B0, bytearray([
        #0x8B, 	#	PHB
        #0xA9, 0x1F, 	#	LDA #$1F
        #0x48, 	#	PHA
        #0xAB, 	#	PLB
        0xAD, 0x48, 0x1A, 	#	LDA $1A48
        0x1A, 	#	INC
        0x8D, 0x48, 0x1A, 	#	STA $1A48
        0xCF, 0x06, 0x80, 0x1F, 	#	CMP $1F8004
        0x90, 0x0B, 	#	BCC return
        0xA9, 0x01, # LDA #$01
        0x0D, 0x2F, 0x1A, # ORA $1A2F
        0x8D, 0x2F, 0x1A, # STA $1A2F
        0x20, 0xC0, 0x83, # JSR $83C0
        #0xAF, 0x01, 0x91, 0x7F, 	#	LDA $7F9101
        #0x09, 0x03, 	#	ORA #$03
        #0x8F, 0x01, 0x91, 0x7F, 	#	STA $7F9101

        #0xAB, 	#	PLB
        0x60	#	RTS

    ])) # INC $1A48 -> RTS

    #Recieve 1UP
    rom.write_bytes(0xF8223, bytearray([
        0xA5, 0x18,  # LDA $18
        0xF0, 0x03,  # BEQ insim
        0xE6, 0x1C,  # INC $1C
        0x60, # RTS
        0xEE, 0x66, 0x1A, # INC $1A66
        0x60,  # RTS
        ]))
    #Recieve Magic
    rom.write_bytes(0xF8218, bytearray([        
        0xA5, 0x18,  # LDA $18
        0xF0, 0x03,  # BEQ insim
        0xE6, 0x21,  # INC $1C
        0x60, # RTS
        0xEE, 0x67, 0x1A, # INC $1A67
        0x60,  # RTS
        ])) # INC $2C -> RTS

    #Recieve 1000 points
    rom.write_bytes(0xF81D4, bytearray([
        0xA5, 0x18,	#	  LDA $18
        0xF0, 0x19,	#	  BEQ $1F81F1
        0xA5, 0x20,	#	  LDA $20
        0x29, 0x0F,	#	  AND #$0F
        0xF0, 0x0D,	#	  BEQ $1F81EB
        0xC9, 0x09,	#	  CMP #$09
        0x90, 0x09,	#	  BCC $1F81EB
        0xA5, 0x20,	#	  LDA $20
        0x29, 0xF0,	#	  AND #$F0
        0x18,	#	  CLC
        0x69, 0x10,	#	  ADC #$10
        0x80, 0x03,	#	  BRA $1F81EE
        0xA5, 0x20,	#	  LDA $20
        0x1A,	#	  INC
        0x85, 0x20,	#	  STA $20
        0x60,	#	  RTS
        0xAD, 0x41, 0x03,	#	  LDA $0341
        0xF0, 0x01,	#	  BEQ $1F81F7
        0x3A,	#	  DEC
        0x0A,	#	  ASL
        0x0A,	#	  ASL
        0xAA,	#	  TAX
        0xBD, 0xB4, 0x02,	#	  LDA $02B4,X
        0x29, 0x0F,	#	  AND #$0F
        0xF0, 0x0E,	#	  BEQ $1F820F
        0xC9, 0x09,	#	  CMP #$09
        0x90, 0x0A,	#	  BCC $1F820F
        0xBD, 0xB4, 0x02,	#	  LDA $02B4,X
        0x29, 0xF0,	#	  AND #$F0
        0x18,	#	  CLC
        0x69, 0x10,	#	  ADC #$10
        0x80, 0x04,	#	  BRA $1F8213
        0xBD, 0xB4, 0x02,	#	  LDA $02B4,X
        0x1A,	#	  INC
        0x9D, 0xB4, 0x02,	#	  STA $02B4,X
        0x60,	#	  RTS

    ]))

    # Recieve Smite, same the bomb item routine.
    rom.write_bytes(0xF8A00, bytearray([
        0xA5, 0x18, 	#	  LDA $18
        0xD0, 0x26, 	#	  BNE return
        0xC2, 0x30, 	#	  REP #$30
        0xA2, 0x30, 0x0B, 	#	  LDX #$0B30
        0xA0, 0x04, 0x00, 	#	  LDY #$0004
            #	 lb2:
        0xBD, 0x10, 0x00, 	#	  LDA $0010,X
        0x89, 0x02, 0xC0, 	#	  BIT #$C002
        0xD0, 0x0B, 	#	  BNE lb1
        0xA9, 0x0F, 0x00, 	#	  LDA #$000F
        0x9D, 0x12, 0x00, 	#	  STA $0012,X
        0x8A, 	#	  TXA
        0x18, 	#	  CLC
        0x69, 0x26, 0x00, 	#	  ADC #$0026
            #	 lb1:
        0xAA, 	#	  TAX
        0x88, 	#	  DEY
        0xD0, 0xE9, 	#	  BNE lb2
        0xA9, 0x8E, 0x00, 	#	  LDA #$008E
        0x02, 0x00, 	#	  COP #$00
        0xE2, 0x30, 	#	  SEP #$30
            #	  return:
        0x60,	#	  RTS

    ]))
    # Custom Population Boom Item
    rom.write_bytes(0x9CB4, bytearray([0xBF, 0xFF]))
    rom.write_bytes(0xF0AE, bytearray([0xC5, 0xFF]))
    rom.write_bytes(0xFFC0, bytearray([
        0x22, 0xC0, 0x82, 0x1F, # JSL $1F82C0
        0x60,# RTS
        0x44,# Dog Icon
        0x46,0x65,0x72,0x74,0x69,0x6C,0x69,0x74,0x79, # "Fertility"
        0x00]))
    rom.write_bytes(0xF82C0, bytearray([
        0x08,	#	  PHP
        0xC2,0x20, # REP #$20
        0xA9,0x00,0x00, # LDA #$0000
        0xE2,0x20,	#	  SEP #$20
        0xA9,0x0F,	#	  LDA #$0F
        0x02,0x00,	#	  COP #$00
        0x28,	#	  PLP
        0x20,0x90,0x82,	#	  JSR $8290
        0xA9,0x11, # LDA #$00
        0x20, 0xE0, 0x82, # JSR $82E0
        0xA9, 0x00, # LDA #$00
        0x99, 0x00, 0x00, # STA $0000,Y
        0x6B,	#	  RTL
    ]))
    rom.write_bytes(0xF82E0, bytearray([
        0xA0, 0xA2, 0x02, 	#	  LDY #$02A2
        0x85, 0x00, 	#	  STA $00
        0xA9, 0x08, 	#	  LDA #$08
        0x85, 0x0C, 	#	  STA $0C
            #	  loop:
        0xB9, 0x00, 0x00, 	#	  LDA $0000,Y
        0xC5, 0x00, 	#	  CMP $00
        0xD0, 0x02, 	#	  BNE next
        0x18, 	#	  CLC
        0x60, 	#	  RTS
            #	  next:
        0xC8, 	#	  INY
        0xC6, 0x0C, 	#	  DEC $0C
        0xD0, 0xF2, 	#	  BNE loop
        0x38, 	#	  SEC
        0x60, 	#	  RTS

    ]))


    #Recieve Population Boom
    rom.write_bytes(0xF8290, bytearray([
        0xAD, 0x41, 0x03, 	#	LDA $0341
        0xF0, 0x02, 	#	BEQ addsouls
        0x3A, 	#	DEC
        0x0A, 	#	ASL
            #	addsouls:
        0xAA, 	#	TAX
        0xC2, 0x20, 	#	REP #$20
        0xBF, 0xFA, 0x9E, 0x7F, 	#	LDA $7F9EFA, X
        0x18, 	#	CLC
        0x69, 0x50, 0x00, 	#	ADC #$0050
        0x9F, 0xFA, 0x9E, 0x7F, 	#	STA $7F9EFA, X
            #	
        0xE2, 0x20, 	#	SEP #$20
        0x60, 	#	RTS

    ]))

    #Recieve Skull Trap, does nothing in action stages
    rom.write_bytes(0xF8A30, bytearray([
        0xA5, 0x18,     # LDA $18
        0xD0, 0x2B,     # BNE Return
        0xC2, 0x30, 	#	  REP #$30
        0xA2, 0x36, 0x0B, 	#	  LDX #$0B36
        0xA0, 0x08, 0x00, 	#	  LDY #$0008
        0xA9, 0x0B, 0x10, 	#	  LDA #$100B
        0x9D, 0x00, 0x00, 	#	  STA $0000,X
        0xA9, 0x87, 0xE7, 	#	  LDA #$E787
        0x9D, 0x02, 0x00, 	#	  STA $0002,X
        0xA9, 0x15, 0x00, 	#	  LDA #$0015
        0x9D, 0x08, 0x00, 	#	  STA $0008,X
        0xC0, 0x00, 0x00, 	#	  CPY #$0000
        0xF0, 0x0A, 	#	  BEQ $1F8A59
        0x88, 	#	  DEY
        0x88, 	#	  DEY
        0x8A, 	#	  TXA
        0x18, 	#	  CLC
        0x69, 0x26, 0x00, 	#	  ADC #$0026
        0xAA, 	#	  TAX
        0x80, 0xDF, 	#	  BRA $1F8A38
        0xE2, 0x30, 	#	  SEP #$30
        0x60, 	#	  RTS

    ]))

    # Redirection Trap
    rom.write_bytes(0xF8980, bytearray([
        0x5A, 	#	  PHY
        0xA2, 0x00, 	#	  LDX #$00
            #	  nextoutter:
        0xA9, 0x08, 	#	  LDA #$08
        0x9F, 0x12, 0x9F, 0x7F, 	#	  STA $7F9F12,X
        0xA0, 0x09, 	#	  LDY #$09
            #	  nextinner:
        0xB9, 0xE5, 0x01, 	#	  LDA $01E5,Y
        0x29, 0x03, 	#	  AND #$03
        0x9F, 0x13, 0x9F, 0x7F, 	#	  STA $7F9F13,X
        0xE8, 	#	  INX
        0x88, 	#	  DEY
        0xD0, 0xF3, 	#	  BNE nextinner
        0xE0, 0x30, 	#	  CPX #$30
        0x90, 0xE7, 	#	  BCC nextoutter
        0x7A, 	#	  PLY
        0x60, 	#	  RTS
    ]))

    #Lightning
    rom.write_bytes(0x829C, bytearray([
        0xA0, 0x00, 0x00, 	# LDY #$0000
        0x22, 0x00, 0x86, 0x1F, 	# JSL $1F8600
        0xC9, 0x00, 	    # CMP #$00
        0xD0, 0x42, 	    # BNE $0182E9
        0xEA, 	            # NOP                     
        0xEA,	            # NOP
    ]))

    #Rain
    rom.write_bytes(0x8307, bytearray([
        0xA0, 0x01, 0x00, 	# LDY #$0001
        0x22, 0x00, 0x86, 0x1F, # JSL $1F8600
        0xC9, 0x00, 	    # CMP #$00
        0xD0, 0x42, 	    # BNE $0182E9
        0xEA, 	            # NOP                      
        0xEA,	            # NOP
    ]))

    #Sun
    rom.write_bytes(0x8372, bytearray([
        0xA0, 0x02, 0x00, 	# LDY #$0002
        0x22, 0x00, 0x86, 0x1F, # JSL $1F8600
        0xC9, 0x00, 	    # CMP #$00
        0xD0, 0x42, 	    # BNE $0182E9
        0xEA, 	            # NOP                      
        0xEA,	            # NOP
    ]))

    #Wind
    rom.write_bytes(0x843D, bytearray([
        0xA0, 0x03, 0x00, 	# LDY #$0003
        0x22, 0x00, 0x86, 0x1F, # JSL $1F8600
        0xC9, 0x00, 	    # CMP #$00
        0xD0, 0x37, 	    # BNE $0182E9
        0xEA, 	            # NOP                      
        0xEA,	            # NOP
    ]))

    #Earthquake
    rom.write_bytes(0x83DD, bytearray([
        0xA0, 0x04, 0x00, 	# LDY #$0003
        0x22, 0x00, 0x86, 0x1F, # JSL $1F8600
        0xC9, 0x00, 	    # CMP #$00
        0xD0, 0x37, 	    # BNE $0182E9
        0xEA, 	            # NOP                      
        0xEA,	            # NOP
    ]))

    #Check if Miracle can be used
    rom.write_bytes(0xF8600, bytearray([
        0x8B, 	#	  PHB
        0xA9, 0x1F, 	#	  LDA #$1F
        0x48, 	#	  PHA
        0xAB, 	#	  PLB
        0xAD, 0x44, 0x1A, 	#	  LDA $1A44
        0x39, 0xEA, 0x85, 	#	  AND $85EA,Y
        0xD9, 0xEA, 0x85, 	#	  CMP $85EA,Y
        0xF0, 0x07, 	#	  BEQ $1F8617
        0xA0, 0x83, 0xF2, 	#	  LDY #$F283
        0xA9, 0x01, 	#	  LDA #$01
        0x80, 0x1C, 	#	  BRA $1F8630
        0xC2, 0x20, 	#	  REP #$20
        0x98, 	#	  TYA
        0x0A, 	#	  ASL
        0xA8, 	#	  TAY
        0xAF, 0x82, 0x02, 0x7E, 	#	  LDA angel_SP
        0xD9, 0xE0, 0x85, 	#	  CMP $85E0,Y
        0xE2, 0x20, 	#	  SEP #$20
        0x90, 0x04, 	#	  BCC needsp
        0xA9, 0x00, 	#	  LDA #$00
        0x80, 0x08, 	#	  BRA exit
            #	  needsp:
        0xDA, 	#	  PHX
        0xBB, 	#	  TYX
        0xBC, 0xF0, 0x85, 	#	  LDY $85F0,X
        0xA9, 0x01, 	#	  LDA #$01
        0xFA, 	#	  PLX
            #	  exit:
        0xAB, 	#	  PLB
        0x6B,	#	  RTL
    ]))

    # SP Cost Text table
    rom.write_bytes(0xF85F0, bytearray([
        0xCE, 0xFC, 0x6F, 0xFD, 0x0C, 0xFF, 0xE2, 0xFD, 0x6A, 0xFE, 0xCE, 0xFC, 0xCE, 0xFC, 0xCE, 0xFC,
    ]))

    #Jump to check if item is permanent routine
    rom.write_bytes(0x922B, bytearray([0x22, 0x40, 0x86, 0x1F, 0xEA])) # JSL $1F8640

    #Permanent Item (Wheat)
    rom.write_bytes(0xF8640, bytearray([
        0xC9, 0x08, # CMP #$08
        0xF0, 0x09, # BEQ $1F8649
        0xC9, 0x13, # CMP #$13
        0xF0, 0x05, # BEQ $1F8649
        0xA9, 0x00, # LDA #$00
        0x99, 0x00, 0x00, # STA $0000,Y
        0x6B, # RTL
        ]))

    #Check if flame sword is collected on slash, UNTESTED
    if world.options.fire_sword:
        #rom.write_bytes(0x8CA, bytearray([0xEA, 0xAD, 0x4A, 0x1A])) #LDA $1A4A
        rom.write_bytes(0x8CA, bytearray([0x22, 0xB0, 0x82, 0x1F])) # JSL 1F82B0

    #Jump to arrow power routine
    rom.write_bytes(0xB361, bytearray([0x22, 0x58, 0x87, 0x1F, 0xEA ]))

    rom.write_bytes(0xF8758, bytearray([
        0xAD, 0x45, 0x1A, #LDA $1A45
        0x9D, 0x16, 0x00, 
        0x6B #RTL
    ]))

    #Jump to magic check routine
    rom.write_bytes(0x90E5, bytearray([0x22, 0x80, 0x87, 0x1F, 0x60])) # JSL $1F8780 -> RTS

    #jump to source of life check routine
    rom.write_bytes(0x9CBD, bytearray([0x22, 0x6E, 0x87, 0x1F, 0x80, 0x03, 0xEA, 0xEA, 0xEA,  ]))# JSL $1F876E (5 NOPS for padding)

    #Source of Magic checks
    rom.write_bytes(0x9CD6, bytearray([
        0xA9, 0x01, 		# LDA #$01
        0xAC, 0x41, 0x03,  	# LDY $0341
        0x88,  				# DEY
        0xF0, 0x03,  		# BEQ $019CE1
        0x0A,  				# ASL
        0x80, 0xFA,  		# BRA $019CDB
        0x0D, 0x1C, 0x1A,  	# ORA $1A1C
        0x8D, 0x1C, 0x1A,  	# STA $1A1C
        0xEA, 				# NOP
    ]))

    

    #check if item is a key item (excluding compass)
    rom.write_bytes(0x90EA, bytearray([
        0xC9, 0x10,             #CMP #$10
        0xB0, 0x05,             #BCS jmpgetoff
        0x22, 0x00, 0x87, 0x1F, #JSL $1F8700 Jump to key item check routine
        0x60,                   #RTS
        0x22, 0x30, 0x87, 0x1F, #JSL $1F8730 Jump to offering check routine
        0x60                    #RTS
    ]))
    
    #key item check
    rom.write_bytes(0xF8700, bytearray([
        0x08,		 	#PHP
        0x5A,           #PHY
        0xDA,           #PHX
        0x48,           #PHA 
        0xC2, 0x20,     #REP #$20
        0xA9, 0x00, 0x00, #LDA #$0000
        0xAA,           #TAX
        0xE2, 0x20,     #SEP #$20
        0x68,           #PLA

        0xC9, 0x0D,     #CMP #$0D
        0x90, 0x01,     #BCC cnt1
        0x3A,           #DEC

        0x38,			#SEC
        0xE9, 0x07,	 	#SBC #$07
        0xAA,		 	#TAX
        0xA9, 0x01,	 	#LDA #$01

        0xE0, 0x00,	0x00, 	#CPX #$0000
        0xF0, 0x04,	 	#BEQ ex1

        0x0A,		 	#ASL
        0xCA,		 	#DEX
        0x80, 0xF7,	 	#BRA lp1

        0x0D, 0x14, 0x1A, #ORA $1A14
        0x8D, 0x14, 0x1A, #STA $1A14
        0xFA,		 	#PLX
        0x7A,           #PLY
        0x28,		 	#PLP
        0x6B		 	#RTL
    ]))
        
    #Normal offerings checks
    rom.write_bytes(0xF8730, bytearray([
        0x08, 	        #	PHP
        0x5A,           #   PHY
        0xDA, 	        #	PHX
        0x48, 	        #	PHA
        0xE2, 0x10, 	#	SEP #$10 ;8bit XY

        0x38, 	        #	SEC
        0xE9, 0x10, 	#	SBC #$10
        0xAA, 	        #	TAX ;X = Item ID check offset
        0xAC, 0x41, 0x03, #	LDY $0341 ;Y = Current Town
        0xA9, 0x01, 	#	LDA #$01

                        #	lp1:
        0x88, 	        #	DEY
        0xC0, 0x00, 	#	CPY #$00
        0xF0, 0x03, 	#	BEQ ex1
        0x0A, 	        #	ASL
        0x80, 0xF8, 	#	BRA lp1
                        #	ex1:
        0x1D, 0x16, 0x1A, #	ORA $1A16, X
        0x9D, 0x16, 0x1A, #	STA $1A16, X
           	
        0xC2, 0x10, 	#	REP #$10 ;16bit XY
        0x68, 	        #	PLA
        0xFA, 	        #	PLX
        0x7A, 	        #	PLY
        0x28, 	        #	PLP
        0x6B,	        #	RTL


    ]))
    
    #Source of Life checks
    rom.write_bytes(0xF876E, bytearray([
        0xA9, 0x01,         # LDA #$01
        0xAC, 0x41, 0x03,   # LDY $0341
        0x88,               # DEY
        0xF0, 0x03,         # BEQ $1F8779
        0x0A,               # ASL
        0x80, 0xFA,         # BRA $1F8773
        0x0D, 0x1B, 0x1A,   # ORA $1A1B
        0x8D, 0x1B, 0x1A,   # STA $1A1B
        0x6B                # RTL
    ]))

    #Magic Check routine
    rom.write_bytes(0xF8780, bytearray([
        0x08, 	            # PHP
        0xDA, 	            # PHX
        0xC2, 0x20, 	    # REP #$20
        0x29, 0xFF, 0x00, 	# AND #$00FF
        0xAA, 	            # TAX
        0xE2, 0x20, 	    # SEP #$20
        0xA9, 0x01, 	    # LDA #$01
        0xCA, 	            # DEX
        0xF0, 0x03, 	    # BEQ $1F8792
        0x0A, 	            # ASL
        0x80, 0xFA, 	    # BRA $1F878C
        0x0D, 0x12, 0x1A, 	# ORA $1A12
        0x8D, 0x12, 0x1A, 	# STA $1A12
        0xFA, 	            # PLX
        0x28, 	            # PLP
        0x6B 	            # RTL
    ]))

    #Jump to text handling routine
    #It's broken right now
    #rom.write_bytes(0x181B8, bytearray([0x20, 0x8E, 0x80 ])) #JSR $B701

    #Do not gain civ levels
    rom.write_bytes(0x1808C, bytearray([0x80, 0x05, 0x22, 0x9A, 0xFF, 0x01, 0x60,]))
    rom.write_bytes(0x1B6FC, bytearray([
        0x22, 0xA0, 0x87, 0x1F, 
        0xAE, 0xFB, 0x7B, 
        0x80, 0x2C,
        0xEA, 0xEA, 0xEA, 0xEA, 0xEA
        ]))
    
    #Civ level up checks
    rom.write_bytes(0xF87A0, bytearray([0x48, 
        0xDA, 
        0xE2, 0x30, 
        0x8B, 
        0xA9, 0x7E, 
        0x48, 
        0xAB, 
        0xAE, 0x41, 0x03, 
        0xA9, 0x01, 
        0xE0, 0x00, 
        0xF0, 0x04, 
        0x0A, 
        0xCA, 
        0x80, 0xF8, 
        0x8D, 0x0E, 0x1A, 
        0xAD, 0x28, 0x1A, 
        0x2D, 0x0E, 0x1A, 
        0xD0, 0x0B, 
        0xAD, 0x0E, 0x1A, 
        0x0D, 0x28, 0x1A, 
        0x8D, 0x28, 0x1A, 
        0x80, 0x09, 
        0xAD, 0x0E, 0x1A, 
        0x0D, 0x29, 0x1A, 
        0x8D, 0x29, 0x1A, 
        0xAB, 
        0xC2, 0x30, 
        0xFA, 
        0x68, 
        0x6B
        ]))

    # Jump to action stage item check routine
    rom.write_bytes(0x16DF, bytearray([0x22, 0xE0, 0x87, 0x1F ])) # JSL $1F87E0

    # Action Stage check routine
    rom.write_bytes(0xF87E0, bytearray([
        0x48, 	#	  PHA
        0xBD, 0x02, 0x00, 	#	  LDA $0002,X
        0x8D, 0x22, 0x1A, 	#	  STA $1A22
        0xBD, 0x04, 0x00, 	#	  LDA $0004,X
        0x8D, 0x24, 0x1A, 	#	  STA $1A24
        0xA5, 0x18, 	#	  LDA $18
        0x8D, 0x20, 0x1A, 	#	  STA $1A20
        0x68, 	#	  PLA
        0x18, 	#	  CLC
        0x69, 0x00, 0xA0, 	#	  ADC #$A000
        0x6B,	#	  RTL
    ]))

    #Setup AP Data on Load
    rom.write_bytes(0xF8800, bytearray([

        0xAF, 0x04, 0x80, 0x1F,
        0xF0, 0x1A,
        0xA2, 0x0A, 0x00,

        0x9F, 0x18, 0x6B, 0x7F,
        0xF0, 0x04,
        0xCA,
        0xCA,
        0x80, 0xF6,

        0xA9, 0x60,
        0xA2, 0x16, 0x00,

        0x9D, 0xB3, 0x02,
        0xF0, 0x03,
        0xCA,
        0x80, 0xF8,

        0xA9, 0x01,
        0x8D, 0x40, 0x1A,
        0x8D, 0x45, 0x1A,
        0xA2, 0x0A, 0x00,

        0x9D, 0x2E, 0x02,
        0xF0, 0x04,
        0xCA,
        0xCA,
        0x80, 0xF7,
        0x22, 0x20, 0x84, 0x1F ,
        0x22, 0x22, 0xA6, 0x02,
        0x6B,
     ]))
    
    #This is to call the textbox routine from bank $1F where we have all our AP code
    #Not currently used
    rom.write_bytes(0xFF9A, bytearray([0x20, 0x29, 0x8E, 0x6B])) #JSR $8E29 -> RTL 


    #Text code
    #'Master, you do not \n have this yet.'
    rom.write_bytes(0xF283, bytearray([0x8A, 0x80, 0xFB, 0xC9, 0x0D, 0x89, 0x87, 0x79, 0x65, 0x74, 0x2E, 0x00]))

    #'AW $1A45'
    rom.write_bytes(0xF4A2, bytearray([0x41, 0x57, 0x40, 0x09, 0x02, 0x45, 0x1A, 0x20]))
    #'Crystal $1A48'
    rom.write_bytes(0xF4BF, bytearray([0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6C, 0x20, 0x09, 0x02, 0x48, 0x1A]))
    # Level Select Text
    rom.write_bytes(0xF783, bytearray([
        0x05, 0x06, 0x0D,
        0x48, 0x6F, 0x6C, 0x64, 0x40, 0x4C, 0x40, 0x85, 0x70, 0x6C, 0x61, 0x79, 0x40, 0x61, 0x63, 0x74, 0x40, 0x32, 0x0D, 
        0x4C, 0x40, 0x52, 0x40, 0x73, 0x65, 0x6C, 0x65, 0x63, 0x74, 0x40, 0x85, 0x65, 0x78, 0x69, 0x74, 0x40, 0x40, 0x40
    ]))

    #Recieve Item Text
    rom.write_bytes(0xF9A00, bytearray([0x53, 0x69, 0x72, 0x2C, 0x40, 0x57, 0x65, 0x40, 0x00])) #Sir, We 
    rom.write_bytes(0xF9000, bytearray([
        #00 Clear Text
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #01 Magical Fire
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x43, 0x61, 0x73, 0x74, 0x40, 0x46, 0x69, 0x72,
        0x65, 0x21, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #02 Magical Stardust
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x43, 0x61, 0x73, 0x74, 0x40, 0x53, 0x74, 0x61,
        0x72, 0x64, 0x75, 0x73, 0x74, 0x21, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #03 Magical Aura
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x43, 0x61, 0x73, 0x74, 0x40, 0x41, 0x75, 0x72,
        0x61, 0x21, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #04 Magical Light
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x43, 0x61, 0x73, 0x74, 0x40, 0x4C, 0x69, 0x67,
        0x68, 0x74, 0x21, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #05 Source of Life
        0x41, 0x72, 0x65, 0x40, 0x42, 0x6C, 0x65, 0x73, 0x73, 0x65, 0x64, 0x40, 0x57, 0x69, 0x74, 0x68,
        0x40, 0x4C, 0x69, 0x66, 0x65, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #06 Source of Magic
        0x41, 0x72, 0x65, 0x40, 0x42, 0x6C, 0x65, 0x73, 0x73, 0x65, 0x64, 0x40, 0x57, 0x69, 0x74, 0x68,
        0x40, 0x4D, 0x61, 0x67, 0x69, 0x63, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #07 Bread
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x40, 0x42, 0x72, 0x65, 0x61, 0x64, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #08 Wheat
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x57, 0x68, 0x65, 0x61, 0x74, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #09 Herb
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x48, 0x65, 0x72, 0x62, 0x73, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0A Bridge
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0B Music
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x4D, 0x75, 0x73, 0x69, 0x63, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0C Fake Ancient Tablet
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x42, 0x61, 0x64, 0x40, 0x54, 0x61, 0x62,
        0x6C, 0x65, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0D Ancient Tablet
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x41, 0x6E, 0x63, 0x69, 0x65, 0x6E, 0x74,
        0x40, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0E Magic Skull
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x4D, 0x61, 0x67, 0x69, 0x63, 0x40, 0x53,
        0x6B, 0x75, 0x6C, 0x6C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #0F Fleece
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x46, 0x6C, 0x65, 0x65, 0x63, 0x65, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #10 Fake Bomb
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x46, 0x61, 0x6B, 0x65, 0x40, 0x42, 0x6F,
        0x6D, 0x62, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #11 Fertility
        0x43, 0x61, 0x6E, 0x40, 0x42, 0x6F, 0x6F, 0x73, 0x74, 0x40, 0x4F, 0x75, 0x72, 0x40, 0x50, 0x65,
        0x6F, 0x70, 0x6C, 0x65, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #12 Bomb
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x42, 0x6F, 0x6D, 0x62, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #13 Compass
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x73, 0x73,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #14 Strength of Angel
        0x47, 0x6F, 0x74, 0x40, 0x53, 0x74, 0x72, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x40, 0x4F, 0x66, 0x40,
        0x41, 0x6E, 0x67, 0x65, 0x6C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #15 Level Up
        0x4C, 0x65, 0x76, 0x65, 0x6C, 0x65, 0x64, 0x40, 0x55, 0x70, 0x40, 0x54, 0x6F, 0x40, 0x09, 0x02,
        0x91, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #16 Apple
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x41, 0x70, 0x70, 0x6C, 0x65, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #17 Flame Sword
        0x45, 0x6E, 0x63, 0x68, 0x61, 0x6E, 0x74, 0x65, 0x64, 0x40, 0x4F, 0x75, 0x72, 0x40, 0x53, 0x77,
        0x6F, 0x72, 0x64, 0x21, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #18 Fillmore Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x46, 0x69, 0x6C, 0x6C, 0x6D, 0x6F, 0x72,
        0x65, 0x20, 0x6C, 0x76, 0x20, 0x09, 0x01, 0x2E, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #19 Bloodpool Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x42, 0x6C, 0x6F, 0x6F, 0x64, 0x70, 0x6F,
        0x6F, 0x6C, 0x40, 0x6C, 0x76, 0x20, 0x09, 0x01, 0x30, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1A Kasandora Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x4B, 0x61, 0x73, 0x61, 0x6E, 0x64, 0x6F,
        0x72, 0x61, 0x40, 0x6C, 0x76, 0x20, 0x09, 0x01, 0x32, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1B Aitos Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x41, 0x69, 0x74, 0x6F, 0x73, 0x40, 0x6C,
        0x76, 0x20, 0x09, 0x01, 0x34, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1C Mahawa Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x4D, 0x61, 0x72, 0x61, 0x68, 0x6E, 0x61,
        0x40, 0x6C, 0x76, 0x40, 0x20, 0x09, 0x01, 0x36, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1D Northwall Advancement
        0x41, 0x64, 0x76, 0x61, 0x6E, 0x63, 0x65, 0x64, 0x40, 0x4E, 0x6F, 0x72, 0x74, 0x68, 0x77, 0x61,
        0x6C, 0x6C, 0x40, 0x6C, 0x76, 0x40, 0x09, 0x01, 0x38, 0x02, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1E Progressive Arrow
        0x50, 0x6F, 0x77, 0x65, 0x72, 0x65, 0x64, 0x40, 0x55, 0x70, 0x40, 0x41, 0x72, 0x72, 0x6F, 0x77,
        0x73, 0x40, 0x6C, 0x76, 0x20, 0x09, 0x02, 0x45, 0x1A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #1F Dheim Crystal
        0x47, 0x6F, 0x74, 0x40, 0x44, 0x68, 0x65, 0x69, 0x6D, 0x40, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61,
        0x6C, 0x40, 0x09, 0x02, 0x48, 0x1A, 0x2F, 0x09, 0x02, 0x06, 0x80, 0x20, 0x20, 0x20, 0x20, 0x00,
        #20 Lightning
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x53, 0x74, 0x72, 0x69, 0x6B, 0x65, 0x40, 0x4C,
        0x69, 0x67, 0x68, 0x74, 0x6E, 0x69, 0x6E, 0x67, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #21 Rain
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x4D, 0x61, 0x6B, 0x65, 0x40, 0x52, 0x61, 0x69,
        0x6E, 0x40, 0x46, 0x61, 0x6C, 0x6C, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #22 Sun
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x53, 0x68, 0x69, 0x6E, 0x65, 0x40, 0x54, 0x68,
        0x65, 0x40, 0x53, 0x75, 0x6E, 0x21, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x00,
        #23 Wind
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x42, 0x6C, 0x6F, 0x77, 0x40, 0x54, 0x68, 0x65,
        0x40, 0x57, 0x69, 0x6E, 0x64, 0x73, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #24 Earthquake
        0x43, 0x61, 0x6E, 0x40, 0x4E, 0x6F, 0x77, 0x40, 0x43, 0x61, 0x75, 0x73, 0x65, 0x40, 0x51, 0x75,
        0x61, 0x6B, 0x65, 0x73, 0x21, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x00,
        #25 1UP
        0x48, 0x61, 0x76, 0x65, 0x40, 0x4D, 0x6F, 0x72, 0x65, 0x40, 0x4C, 0x69, 0x66, 0x65, 0x40, 0x40,
        0x40, 0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #26 1000 Points
        0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x40, 0x31, 0x30, 0x30, 0x30, 0x40, 0x50, 0x6F,
        0x69, 0x6E, 0x74, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #27 Magic
        0x48, 0x61, 0x76, 0x65, 0x40, 0x4D, 0x6F, 0x72, 0x65, 0x40, 0x4D, 0x61, 0x67, 0x69, 0x63, 0x40,
        0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #28 Smite
        0x53, 0x6D, 0x69, 0x74, 0x65, 0x64, 0x40, 0x4F, 0x75, 0x72, 0x40, 0x45, 0x6E, 0x65, 0x6D, 0x69,
        0x65, 0x73, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #29 Population Boom
        0x41, 0x72, 0x65, 0x40, 0x54, 0x68, 0x72, 0x69, 0x76, 0x69, 0x6E, 0x67, 0x40, 0x40, 0x40, 0x40,
        0x40, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2A Savior
        0x59, 0x6F, 0x75, 0x40, 0x41, 0x72, 0x65, 0x40, 0x54, 0x68, 0x65, 0x40, 0x53, 0x61, 0x76, 0x69,
        0x6F, 0x72, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2B Prosperity
        0x48, 0x61, 0x76, 0x65, 0x40, 0x4D, 0x61, 0x64, 0x65, 0x40, 0x54, 0x68, 0x65, 0x40, 0x57, 0x6F,
        0x72, 0x6C, 0x64, 0x40, 0x6F, 0x75, 0x73, 0x21, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2C
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2D
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2E
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #2F
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #30 Skull Trap
        0x41, 0x72, 0x65, 0x40, 0x43, 0x75, 0x72, 0x73, 0x65, 0x64, 0x40, 0x57, 0x69, 0x74, 0x68, 0x40,
        0x53, 0x6B, 0x75, 0x6C, 0x6C, 0x73, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #31 Redirection Trap
        0x53, 0x65, 0x65, 0x6D, 0x40, 0x54, 0x6F, 0x40, 0x42, 0x65, 0x40, 0x4C, 0x6F, 0x73, 0x74, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #32
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #33
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #34
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #35
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #36
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
        #37
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
        0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
    ]))

    #Data Tables
    #Miracle SP and item check
    #These are used for the routine that checks if you have the miracle item
    rom.write_bytes(0xF85E0, bytearray([
        0x0A, 0x00, # lightning
        0x14, 0x00, # Rain
        0x1E, 0x00, # Sun
        0x50, 0x00, # Wind
        0xA0, 0x00, # Earthquake
        0x01, 0x02, 0x04, 0x08, 0x10, 0x20 #Bit masks
        ]))

    #item Recieve routine pointer table
    rom.write_bytes(0xF8500, bytearray([
        0x00, 0x81, #00 Return
        0x30, 0x82, #01 Magical Fire
        0x30, 0x82, #02 Magical Stardust
        0x30, 0x82, #03 Magical Aura
        0x30, 0x82, #04 Magical Light
        0x18, 0x81, #05 Source of Life
        0x20, 0x81, #06 Source of Magic
        0x60, 0x82, #07 Bread
        0x60, 0x82, #08 Wheat
        0x60, 0x82, #09 Herb
        0x60, 0x82, #0A Bridge
        0x60, 0x82, #0B Music
        0x60, 0x82, #0C Ancient Tablet
        0x60, 0x82, #0D Ancient Tablet
        0x60, 0x82, #0E Magic Skull
        0x60, 0x82, #0F Fleece
        0x60, 0x82, #10 Bomb
        0x60, 0x82, #11 Fertility
        0x60, 0x82, #12 Bomb (Real)
        0x60, 0x82, #13 Compass
        0x60, 0x82, #14 Strength of Angel
        0x47, 0x81, #15 Level Up
        0x72, 0x81, #16 Apple
        0x41, 0x81, #17 Flame Sword
        0x98, 0x81, #18 Fillmore Advancement
        0x98, 0x81, #19 Bloodpool Advancement
        0x98, 0x81, #1A Kasandora Advancement
        0x98, 0x81, #1B Aitos Advancement
        0x98, 0x81, #1C Mahawa Advancement
        0x98, 0x81, #1D Northwall Advancement
        0x12, 0x81, #1E Progressive Arrow
        0xB0, 0x81, #1F Dheim Crystal
        0x80, 0x81, #20 Lightning
        0x80, 0x81, #21 Rain
        0x80, 0x81, #22 Sun
        0x80, 0x81, #23 Wind
        0x80, 0x81, #24 Earthquake
        0x23, 0x82, #25 1UP
        0xD4, 0x81, #26 1000 Points
        0x18, 0x82, #27 Magic
        0x00, 0x8A, #28 Smite
        0x90, 0x82, #29 Population Boom
        0x00, 0x81, #2A Savior
        0x00, 0x81, #2B Prosperity
        0x00, 0x81, #2C
        0x00, 0x81, #2D
        0x00, 0x81, #2E
        0x00, 0x81, #2F
        0x30, 0x8A, #30 Skull Trap
        0x80, 0x89, #31 Redirection Trap
        0x00, 0x81, #32
        0x00, 0x81, #33
        0x00, 0x81, #34
        0x00, 0x81, #35
        0x00, 0x81, #36
        0x00, 0x81, #37
        ]))
    

    #This is all handled automatically now
    # Max Town Population Requirements
    #max_populations = [world.options.fillmore_max.value, world.options.bloodpool_max.value, world.options.kasandora_max.value, 
                       #world.options.aitos_max.value, world.options.marahna_max.value, world.options.northwall_max.value]
    #rom.write_bytes(0xF85D0, max_populations[0].to_bytes(2, 'little'))
    #rom.write_bytes(0xF85D2, max_populations[1].to_bytes(2, 'little'))
    #rom.write_bytes(0xF85D4, max_populations[2].to_bytes(2, 'little'))
    #rom.write_bytes(0xF85D6, max_populations[3].to_bytes(2, 'little'))
    #rom.write_bytes(0xF85D8, max_populations[4].to_bytes(2, 'little'))
    #rom.write_bytes(0xF85DA, max_populations[5].to_bytes(2, 'little'))

    # Jump to Max population check routine
    rom.write_bytes(0x1C025, bytearray([0x22, 0xA0, 0x86, 0x1F ])) # JSL $1F86A0

    # Max Town Population Checks
    rom.write_bytes(0xF86A0, bytearray([
        0x9F, 0x28, 0x02, 0x00, 	#	  STA $000228,X
        0xC9, 0x05, 	#	CMP #$05
        0x90, 0x17, 	#	BCC return
            #	
        0xDA, 	#	PHX
        0x48, 	#	PHA
        0xA9, 0x01, 	#	LDA #$01
            #	lp1:
        0xE0, 0x00, 0x00, 	#	CPX #$0000
        0xF0, 0x04, 	#	BEQ ex1
        0x0A, 	#	ASL
        0xCA, 	#	DEX
        0x80, 0xF7, 	#	BRA lp1
            #	ex1:
        0x0F, 0x27, 0x1A, 0x7E, 	#	ORA $1A27
        0x8F, 0x27, 0x1A, 0x7E, 	#	STA $1A27
        0x68, 	#	PLA
        0xFA, 	#	PLX
            #	return:
        0x6B,	#	RTL
    ]))

    # Pyramid Check Fix???
    rom.write_bytes(0x1FBEA, bytearray([0xA0, 0x60, 0xFE])) #LDY #$FE60
    rom.write_bytes(0x1FE60, bytearray([0x40, 0x92]))

    # Bridge Food Increase
    rom.write_bytes(0x1C0E5, bytearray([0x30])) # LDY #$30

    #Graphics
    #AP Ofering Icons
    rom.write_bytes(0xF0AC, bytearray([0xA0, 0xFF])) # Use Bag Icon Pointer
    rom.write_bytes(0xFFA0, bytearray([0x45, 0x05])) # Use Bag Icon For Item 10
    #AP Icon Top Tiles
    rom.write_bytes(0x6BC80, bytearray([
        0x00,0xFF,0x7B,0xFF,0x47,0xFF,0x3F,0xF9,0x7F,0xFC,0x79,0xFE,0x01,0xFE,0x58,0xE7,
        0xFF,0xFF,0x84,0xFF,0xB8,0xFF,0xC0,0xC1,0xF8,0x80,0xFA,0x86,0xC6,0xFE,0xA7,0xE7,
        0x00,0xFF,0xDE,0xFF,0xE2,0xFF,0xE0,0x9F,0xDE,0x3F,0xBE,0x7F,0x9C,0x7F,0x1A,0xE7,
        0xFF,0xFF,0x21,0xFF,0x1D,0xFF,0x03,0x83,0x01,0x01,0x61,0x61,0x7F,0x7F,0xFD,0xE7,
    ]))
    #AP Icon Bottom Tiles
    rom.write_bytes(0x6BE80, bytearray([
        0x64,0xC3,0x05,0xC2,0x0E,0x80,0x04,0x88,0x00,0xC8,0x40,0xFC,0x7C,0xFE,0x00,0xFF,
        0x9B,0xC3,0xFA,0xC3,0xF0,0x87,0xF8,0x8F,0xF8,0xCF,0xBC,0xFF,0x82,0xFF,0xFF,0xFF,
        0x26,0xDB,0x80,0x7F,0x60,0x1F,0x20,0x1F,0x00,0x1F,0x02,0x3F,0x3E,0x7F,0x00,0xFF,
        0xFD,0xC3,0x7F,0xC3,0x1F,0xE1,0x1F,0xF1,0x1F,0xF3,0x3D,0xFF,0x41,0xFF,0xFF,0xFF,

    ]))
    # Fertility icon top tiles
    rom.write_bytes(0x6BC40, bytearray([
        0x00,0xFF,0x7F,0xFF,0x40,0xFF,0x5F,0xE0,0x5F,0xE0,0x59,0xE0,0x59,0xE0,0x58,0xF1,
        0xFF,0xFF,0x80,0xFF,0xBF,0xFF,0xA0,0xE0,0xA0,0xE0,0xA6,0xE6,0xA0,0xE6,0xB9,0xF6,
        0x00,0xFF,0xFE,0xFF,0x02,0xFF,0xFA,0x07,0x9A,0x07,0x9A,0x07,0xEA,0x17,0x8A,0x6F,
        0xFF,0xFF,0x01,0xFF,0xFD,0xFF,0x05,0x07,0x05,0x67,0x05,0x67,0x95,0x67,0xED,0x1F,
    ]))
    # Fertility icon bottom tiles
    rom.write_bytes(0x6BE40, bytearray([
        0x50,0xF7,0x59,0xF3,0x55,0xF1,0x5B,0xF3,0x58,0xF7,0x48,0xF7,0x4A,0xE5,0x00,0xFF,
        0xB7,0xF8,0xB3,0xFC,0xB9,0xF6,0xBF,0xF0,0xBF,0xF0,0xBF,0xF0,0xA5,0xFF,0xFF,0xFF,
        0x0A,0x2F,0xDA,0xCF,0xAA,0x8F,0x8A,0x1F,0x8A,0x7F,0x82,0x7F,0x52,0x27,0x00,0xFF,
        0x2D,0xDF,0xCD,0x3F,0x9D,0x6F,0xFD,0x0F,0xFD,0x0F,0xFD,0x0F,0x25,0xFF,0xFF,0xFF,
    ]))
    rom.write_bytes(0xB63E, bytearray([0x22, 0x30, 0x83, 0x1F ])) #JSL $1F8330
    #Always use item icon #10
    rom.write_bytes(0xF8330, bytearray([
        0xC0, 0x4B, 0x02, # CPY #$024B
        0x90, 0x08,  # BCC exit
        0xC0, 0x81, 0x02, # CPY #$0281
        0xB0, 0x03, # BCS exit
        0xA9, 0x10, 0x00, # LDA #$0010
        0x0A,   # ASL
        0x18,   # CLC
        0x65, 0x04, # ADC $04
        0x6B    # RTL
    ]))

    #Expand SRAM
    rom.write_byte(0x7FD8, 0x04)

    #Jump to Save AP items
    rom.write_bytes(0x4F6, bytearray([0x22, 0xA0, 0x83, 0x1F ])) #JSL $1F83A0
    rom.write_bytes(0x1AA10, bytearray([0x22, 0x20, 0x84, 0x1F ])) #JSL $1F8420

    #Ap save item routine
    rom.write_bytes(0xF83A0, bytearray([
        0x48, 	#	  PHA
        0xE2, 0x20, 	#	  SEP #$20
        0xA2, 0x70, 0x00, 	#	  LDX #$70

        0xBF, 0x00, 0x1A, 0x7E, 	#	  LDA $7E1A00, X
        0x9F, 0x00, 0x20, 0x70, 	#	  STA $702000, X
        0xCA, 	#	  DEX
        0x10, 0xF5, 	#	  BPL lp1

        0xA9, 0x00, 	#	  LDA #$00
        0x8F, 0xFF, 0x1F, 0x70, 	#	  STA $701FFF
        0xC2, 0x20, 	#	  REP #$20
        0x68, 	#	  PLA
        0x64, 0x14, 	#	  STZ $14
        0x64, 0x16, 	#	  STZ $16
        0x6B, 	#	  RTL

    ]))

    #Load AP items
    rom.write_bytes(0xF8420, bytearray([
        0x8F, 0x20, 0x00, 0x00, 	#	  STA $000020
        0x48, 	#	  PHA
        0xDA, 	#	  PHX
        0xAF, 0xFF, 0x1F, 0x70, 	#	  LDA $701FFF
        0xD0, 0x0F, 	#	  BNE exit
        0xEA, 	#	  NOP
        0xA2, 0x70, 0x00, 	#	  LDX #$0070
            #	  lp1: 
        0xBF, 0x00, 0x20, 0x70, 	#	  LDA $702000, X
        0x9F, 0x00, 0x1A, 0x7E, 	#	  STA $7E1A00, X
        0xCA, 	#	  DEX
        0x10, 0xF5, 	#	  BPL lp1
            #	  exit:
        0xFA, 	#	  PLX
        0x68, 	#	  PLA
        0x6B,	#	  RTL


    ]))

    # Make stages replayable
    rom.write_bytes(0x86D4, bytearray([
        0xE2, 0x20, 	#	  SEP #$20
        0xA5, 0xA0, 	#	  LDA $A0
        0x29, 0x20, 	#	  AND #$20 ;Will Be 0 if L isn't held, 
        0xF0, 0x0F, 	#	  BEQ bra_playAct1
        0xBD, 0x05, 0x02, 	#	  LDA $0205,X
        0xF0, 0x78, 	#	  BEQ $018759
        0xA9, 0x01, 	#	  LDA #$01
        0x80, 0x06,	#	  BRA bra_playAct1
        0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, # Free space
        0x8D, 0x0F, 0x1A #STA 1A0F ;Store act to $1A0F, 0 for act 1, 1 for act 2

    ]))
    rom.write_bytes(0x0104D4, bytearray([
        0x22, 0xD0, 0x89, 0x1F,#  JSL $1F89D0
        0x80, 0x08, #  BRA $0284E2
        0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, #NOP padding
    ]))
    # Stage Start Code
    rom.write_bytes(0xF89D0, bytearray([
        0xAD, 0xAB, 0x02,	#	  LDA $02AB
        0x18,	#	  CLC
        0x6D, 0x66, 0x1A,	#	  ADC $1A66
        0x85, 0x1C,	#	  STA $1C ;lives
        0x9C, 0x66, 0x1A, # STZ $1A66
        0x64, 0x1F,	#	  STZ $1F
        0x64, 0x20,	#	  STZ $20
        0xAD, 0x95, 0x02,	#	  LDA $0295
        0x18,	#	  CLC
        0x6D, 0x67, 0x1A,	#	  ADC $1A67
        0x85, 0x21,	#	  STA $21 ;magic
        0x9C, 0x67, 0x1A,  # STZ $1A67
        0x6B	#	  RTL
    ]))

    rom.write_bytes(0x22A4, bytearray([0x22, 0x80, 0x86, 0x1F, 0xEA])) #JSL 1F8680

    #Check high score and write action score checks
    rom.write_bytes(0xF8680, bytearray([
        0xA5, 0x1F, 	#	  LDA $1F
        0xD9, 0xB3, 0x02, 	#	  CMP $02B3,Y
        0x90, 0x03, 	#	  BCC nx1
        0x99, 0xB3, 0x02, 	#	  STA $02B3,Y ;only store the higher score
            #	  nx1:
        0xC9, 0x00, 0x10, 	#	  CMP #$1000 
            #	  ;return to this if you want to use a score table
                # ;Right now this loop doesn't actually do anything but waste CPU cycles
        0x90, 0x0E, 	#	  BCC return
        0xE2, 0x20, 	#	  SEP #$20
        0xA9, 0x01, 	#	  LDA #$01
        0xA6, 0x18, 	#	  LDX $18
            #	  lp1:
        0xCA, 	#	  DEX
        0xF0, 0x03, 	#	  BEQ ex1
        0x0A, 	#	  ASL
        0x80, 0xFA, 	#	  BRA lp1
            #	  ex1:
        0xC2, 0x20, 	#	  REP #$20
            #	  return:
        0x6B,	#	  RTL

    ]))

    #Free space
    rom.write_bytes(0x86E5, bytearray([0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA]))

    #Called when clearing a level, free to JSL with 3 free extra bytes above it
    rom.write_bytes(0x2731, bytearray([0xEA, 0xEA, 0xEA, 0xEA]))

    # Goal routines
    rom.write_bytes(0x75A9, bytearray([0x20, 0x23, 0xFF])) #JSR $FF20
    rom.write_bytes(0x2357, bytearray([0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA, 0xEA,0xEA, 0xEA, 0xEA])) # Do not open Death heim

    # Goal type check
    rom.write_bytes(0xF83C0, bytearray([
        0x08, 	#	PHP
        0x8B, 	#	PHB
        0xE2, 0x20, 	#	SEP #$20
        0xA9, 0x1F, 	#	LDA #$1F
        0x48, 	#	PHA
        0xAB, 	#	PLB
        0xAD, 0x2F, 0x1A, 	#	LDA $1A2F
        0xF0, 0x2A, 	#	BEQ return
            #	
        0xAD, 0x0B, 0x80, 	#	LDA $800B
        0x18, 	#	CLC
        0x6D, 0x0C, 0x80, 	#	ADC $800C
        0xCD, 0x2F, 0x1A, 	#	CMP $1A2F
        0xD0, 0x1E, 	#	BNE return
            #	
        0xAD, 0x0A, 0x80, 	#	LDA $800A
        0xF0, 0x14, 	#	BEQ notanzra
            #	tanzra:
        0xAD, 0x2C, 0x1A, 	#	LDA $1A2C
        0xD0, 0x14, 	#	BNE return
            #	
        0xAF, 0x01, 0x91, 0x7F, 	#	LDA $7F9101
        0x09, 0x03, 	#	ORA #$03
        0x8F, 0x01, 0x91, 0x7F, 	#	STA $7F9101
        0xEE, 0x2C, 0x1A, 	#	INC $1A2C
        0x80, 0x05, 	#	BRA return
            #	
            #	notanzra:
        0xA9, 0x07, 	#	LDA #$07
        0x8D, 0x47, 0x03, 	#	STA $0347 ;Beat game
            #	
            #	return:
        0xAB, 	#	PLB
        0x28, 	#	PLP
        0x60,	#	RTS

    ]))

    #Clear Death Heim
    rom.write_bytes(0x7F23, bytearray([
        0xE2, 0x20, 	#	SEP #$20
        0xA9, 0x01, 	#	LDA #$01
        0x0D, 0x2F, 0x1A, 	#	ORA $1A26
        0x8D, 0x2F, 0x1A, 	#	STA $1A26
        0xC2, 0x20, 	#	REP #$20
        0xA9, 0xF0, 0x00, 	#	LDA #$00F0
        0x60,	#	RTS
    ]))


    rom.write_bytes(0x18E2B, bytearray([0x22, 0x00, 0x83, 0x1F ])) #JSL $1F8300

    #Reach Population Goal Routine
    rom.write_bytes(0xF8300, bytearray([
        0x8F, 0x18, 0x02, 0x00, 	#	  STA $000218
        0xCF, 0x08, 0x80, 0x1F,	#	  CMP $1F8008
        0x90, 0x13, 	#	  BCC return
            #	  
        0x48, 	#	  PHA
        0xE2, 0x20, 	#	  SEP #$20
        0xA9, 0x02, 	#	  LDA #$02
        0x0F, 0x2F, 0x1A, 0x7E, 	#	  ORA $1A26
        0x8F, 0x2F, 0x1A, 0x7E, 	#	  STA $1A26 ;AP clear check
        0x20, 0xC0, 0x83, # JSR $83C0
        #0xA9, 0x07, 	#	  LDA #07
        #0x8F, 0x47, 0x03, 0x7E, 	#	  STA $0347 ;Beat game
        0xC2, 0x20, 	#	  REP #$20
        0x68, 	#	  PLA
            #	  return:
            #	  
        0x6B,	#	  RTL
    ]))

    #Faster Construction Time
    if world.options.fast_construct:
        rom.write_bytes(0x181E0, bytearray([0xC9, 0x80, 0x01])) #change Construction Wait Timer

    #DEBUG CODE
    #if world.options.debug_mode:
    #    rom.write_byte(DEBUG_ADR, 0x01)
    #    rom.write_bytes(0x181E0, bytearray([0xC9, 0x30, 0x00])) #change Construction Wait Timer
    #else:
    rom.write_byte(DEBUG_ADR, 0x00)

    #set population goal
    if world.options.population_goal:
        popgoal = world.options.pop_goal_count.value
        rom.write_bytes(POPGOAL_ADR, popgoal.to_bytes(2, 'little'))
        rom.write_byte(POPGOAL_ADR_ENA, 0x02)
    else:
        rom.write_bytes(POPGOAL_ADR, bytearray([0x7F, 0x7F])) #Unachieveable
        rom.write_byte(POPGOAL_ADR_ENA, 0x00)

    #Required Death Hiem crystals
    rom.write_byte(DCRYSTAL_ADR + 0x1, 0x00)
    if world.options.crystal_goal:
        rom.write_byte(DCRYSTAL_ADR, world.options.crystal_count.value)
        rom.write_byte(CRYGOAL_ADR_ENA, 0x01)
    else:
        rom.write_byte(DCRYSTAL_ADR, 0x7F) #Unachievable
        rom.write_byte(CRYGOAL_ADR_ENA, 0x00)

    if world.options.tanzra_require:
        rom.write_byte(TANZRA_ADR, 0x01)
    else:
        rom.write_byte(TANZRA_ADR, 0x00)

    from Utils import __version__
    rom.name = bytearray(f'AR{__version__.replace(".", "")[0:3]}_{world.player}_{world.multiworld.seed:11}\0', 'utf8')[:21]
    rom.name.extend([0] * (21 - len(rom.name)))
    rom.write_bytes(0x7FC0, rom.name)
    if world.options.death_link:
        rom.write_byte(DEATHLINK_ADR, 0x01)
    else:
        rom.write_byte(DEATHLINK_ADR, 0x00)



class ActraiserDeltaPatch(APDeltaPatch):
    hash = USHASH
    game = "Actraiser"
    patch_file_ending = ".apactr"

    @classmethod
    def get_source_data(cls) -> bytes:
        return get_base_rom_bytes()


def get_base_rom_bytes(file_name: str = "") -> bytes:
    base_rom_bytes = getattr(get_base_rom_bytes, "base_rom_bytes", None)
    if not base_rom_bytes:
        file_name = get_base_rom_path(file_name)
        base_rom_bytes = bytes(read_snes_rom(open(file_name, "rb")))

        basemd5 = hashlib.md5()
        basemd5.update(base_rom_bytes)
        if USHASH != basemd5.hexdigest():
            raise Exception('Supplied Base Rom does not match known MD5 for US(1.0) release. '
                            'Get the correct game and version, then dump it')
        get_base_rom_bytes.base_rom_bytes = base_rom_bytes
    return base_rom_bytes

def get_base_rom_path(file_name: str = "") -> str:
    options = Utils.get_options()
    if not file_name:
        file_name = options["actraiser_options"]["rom_file"]
    if not os.path.exists(file_name):
        file_name = Utils.user_path(file_name)
    return file_name